/* The following code was generated by JFlex 1.4.3 on 26.6.14 11:30 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

package org.netbeans.modules.php.editor.parser;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import org.netbeans.modules.php.editor.*;
import org.netbeans.modules.php.editor.parser.astnodes.*;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP2", "UUF_UNUSED_FIELD"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26.6.14 11:30 from the specification file
 * <tt>/home/ondrej/Projects/web-main/php.editor/tools/ASTPHP5Scanner.flex</tt>
 */
public class ASTPHP5Scanner implements Scanner {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 30;
  public static final int ST_END_HEREDOC = 14;
  public static final int ST_DOUBLE_QUOTES = 6;
  public static final int ST_LOOKING_FOR_VARNAME = 24;
  public static final int ST_LOOKING_FOR_PROPERTY = 22;
  public static final int ST_IN_SHORT_ECHO = 34;
  public static final int ST_END_NOWDOC = 20;
  public static final int ST_COMMENT = 28;
  public static final int ST_ONE_LINE_COMMENT = 32;
  public static final int ST_HALTED_COMPILER = 36;
  public static final int ST_START_NOWDOC = 18;
  public static final int ST_VAR_OFFSET = 26;
  public static final int ST_IN_SCRIPTING = 2;
  public static final int ST_HEREDOC = 10;
  public static final int YYINITIAL = 0;
  public static final int ST_NOWDOC = 16;
  public static final int ST_LOOKING_FOR_CLASS_CONST = 4;
  public static final int ST_START_HEREDOC = 12;
  public static final int ST_BACKQUOTE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\17\1\20\2\0\1\16\22\0\1\17\1\62\1\22\1\103"+
    "\1\21\1\66\1\67\1\102\1\55\1\56\1\64\1\4\1\72\1\51"+
    "\1\2\1\65\1\5\1\11\10\1\1\53\1\25\1\63\1\26\1\52"+
    "\1\76\1\77\1\7\1\10\1\35\1\31\1\3\1\32\1\46\1\43"+
    "\1\27\1\57\1\45\1\42\1\50\1\34\1\36\1\47\1\61\1\40"+
    "\1\37\1\30\1\33\1\54\1\44\1\6\1\41\1\13\1\73\1\15"+
    "\1\74\1\71\1\60\1\23\1\7\1\10\1\35\1\31\1\3\1\32"+
    "\1\46\1\43\1\27\1\57\1\45\1\42\1\50\1\34\1\36\1\47"+
    "\1\61\1\40\1\101\1\30\1\33\1\54\1\44\1\6\1\41\1\13"+
    "\1\24\1\70\1\100\1\75\53\13\1\13\12\13\1\13\4\13\1\13"+
    "\5\13\27\13\1\13\37\13\1\13\10\13\u01c2\12\4\0\14\12\16\0"+
    "\5\12\7\0\1\12\1\0\1\12\201\0\5\12\1\0\2\12\2\0"+
    "\4\12\10\0\1\12\1\0\3\12\1\0\1\12\1\0\24\12\1\0"+
    "\123\12\1\0\213\12\10\0\236\12\11\0\46\12\2\0\1\12\7\0"+
    "\47\12\110\0\33\12\5\0\3\12\55\0\53\12\25\0\12\14\4\0"+
    "\2\12\1\0\143\12\1\0\1\12\17\0\2\12\7\0\2\12\12\14"+
    "\3\12\2\0\1\12\20\0\1\12\1\0\36\12\35\0\131\12\13\0"+
    "\1\12\16\0\12\14\41\12\11\0\2\12\4\0\1\12\5\0\26\12"+
    "\4\0\1\12\11\0\1\12\3\0\1\12\27\0\31\12\253\0\66\12"+
    "\3\0\1\12\22\0\1\12\7\0\12\12\4\0\12\14\1\0\7\12"+
    "\1\0\7\12\5\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12"+
    "\1\0\1\12\3\0\4\12\3\0\1\12\20\0\1\12\15\0\2\12"+
    "\1\0\3\12\4\0\12\14\2\12\23\0\6\12\4\0\2\12\2\0"+
    "\26\12\1\0\7\12\1\0\2\12\1\0\2\12\1\0\2\12\37\0"+
    "\4\12\1\0\1\12\7\0\12\14\2\0\3\12\20\0\11\12\1\0"+
    "\3\12\1\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\3\0"+
    "\1\12\22\0\1\12\17\0\2\12\4\0\12\14\25\0\10\12\2\0"+
    "\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\3\0"+
    "\1\12\36\0\2\12\1\0\3\12\4\0\12\14\1\0\1\12\21\0"+
    "\1\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0\14\12\26\0"+
    "\1\12\25\0\12\14\25\0\10\12\1\0\3\12\1\0\27\12\1\0"+
    "\12\12\1\0\5\12\3\0\1\12\32\0\2\12\6\0\2\12\4\0"+
    "\12\14\25\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0"+
    "\5\12\3\0\1\12\40\0\1\12\1\0\2\12\4\0\12\14\1\0"+
    "\2\12\22\0\10\12\1\0\3\12\1\0\51\12\2\0\1\12\20\0"+
    "\1\12\21\0\2\12\4\0\12\14\12\0\6\12\5\0\22\12\3\0"+
    "\30\12\1\0\11\12\1\0\1\12\2\0\7\12\72\0\60\12\1\0"+
    "\2\12\14\0\7\12\11\0\12\14\47\0\2\12\1\0\1\12\2\0"+
    "\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0"+
    "\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\4\12\1\0"+
    "\2\12\11\0\1\12\2\0\5\12\1\0\1\12\11\0\12\14\2\0"+
    "\2\12\42\0\1\12\37\0\12\14\26\0\10\12\1\0\44\12\33\0"+
    "\5\12\163\0\53\12\24\0\1\12\12\14\6\0\6\12\4\0\4\12"+
    "\3\0\1\12\3\0\2\12\7\0\3\12\4\0\15\12\14\0\1\12"+
    "\1\0\12\14\6\0\46\12\12\0\53\12\1\0\1\12\3\0\u0149\12"+
    "\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\51\12"+
    "\1\0\4\12\2\0\41\12\1\0\4\12\2\0\7\12\1\0\1\12"+
    "\1\0\4\12\2\0\17\12\1\0\71\12\1\0\4\12\2\0\103\12"+
    "\45\0\20\12\20\0\125\12\14\0\u026c\12\2\0\21\12\1\0\32\12"+
    "\5\0\113\12\25\0\15\12\1\0\4\12\16\0\22\12\16\0\22\12"+
    "\16\0\15\12\1\0\3\12\17\0\64\12\43\0\1\12\4\0\1\12"+
    "\3\0\12\14\46\0\12\14\6\0\130\12\10\0\51\12\1\0\1\12"+
    "\5\0\106\12\12\0\35\12\51\0\12\14\36\12\2\0\5\12\13\0"+
    "\54\12\25\0\7\12\10\0\12\14\46\0\27\12\11\0\65\12\53\0"+
    "\12\14\6\0\12\14\15\0\1\12\135\0\57\12\21\0\7\12\4\0"+
    "\12\14\51\0\36\12\15\0\2\12\12\14\6\0\46\12\32\0\44\12"+
    "\34\0\12\14\3\0\3\12\12\14\44\12\153\0\4\12\1\0\4\12"+
    "\16\0\300\12\100\0\u0116\12\2\0\6\12\2\0\46\12\2\0\6\12"+
    "\2\0\10\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\37\12"+
    "\2\0\65\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12"+
    "\3\0\4\12\2\0\6\12\4\0\15\12\5\0\3\12\1\0\7\12"+
    "\164\0\1\12\15\0\1\12\20\0\15\12\145\0\1\12\4\0\1\12"+
    "\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\4\12\1\0\13\12\2\0\4\12\5\0\5\12"+
    "\4\0\1\12\64\0\2\12\u0a7b\0\57\12\1\0\57\12\1\0\205\12"+
    "\6\0\4\12\21\0\46\12\12\0\66\12\11\0\1\12\20\0\27\12"+
    "\11\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\7\12\1\0\7\12\120\0\1\12\u01d5\0\2\12"+
    "\52\0\5\12\5\0\2\12\4\0\126\12\6\0\3\12\1\0\132\12"+
    "\1\0\4\12\5\0\51\12\3\0\136\12\21\0\33\12\65\0\20\12"+
    "\u0200\0\u19b6\12\112\0\u51cc\12\64\0\u048d\12\103\0\56\12\2\0\u010d\12"+
    "\3\0\20\12\12\14\2\12\24\0\57\12\20\0\31\12\10\0\106\12"+
    "\61\0\11\12\2\0\147\12\2\0\4\12\1\0\2\12\16\0\12\12"+
    "\120\0\10\12\1\0\3\12\1\0\4\12\1\0\27\12\35\0\64\12"+
    "\16\0\62\12\34\0\12\14\30\0\6\12\3\0\1\12\4\0\12\14"+
    "\34\12\12\0\27\12\31\0\35\12\7\0\57\12\34\0\1\12\12\14"+
    "\46\0\51\12\27\0\3\12\1\0\10\12\4\0\12\14\6\0\27\12"+
    "\3\0\1\12\5\0\60\12\1\0\1\12\3\0\2\12\2\0\5\12"+
    "\2\0\1\12\1\0\1\12\30\0\3\12\43\0\6\12\2\0\6\12"+
    "\2\0\6\12\11\0\7\12\1\0\7\12\221\0\43\12\15\0\12\14"+
    "\6\0\u2ba4\12\14\0\27\12\4\0\61\12\u2104\0\u012e\12\2\0\76\12"+
    "\2\0\152\12\46\0\7\12\14\0\5\12\5\0\1\12\1\0\12\12"+
    "\1\0\15\12\1\0\5\12\1\0\1\12\1\0\2\12\1\0\2\12"+
    "\1\0\154\12\41\0\u016b\12\22\0\100\12\2\0\66\12\50\0\14\12"+
    "\164\0\5\12\1\0\207\12\23\0\12\14\7\0\32\12\6\0\32\12"+
    "\13\0\131\12\3\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12"+
    "\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\15\0\2\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\4\4\6\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\17\6\1\20\1\21\1\22\1\6"+
    "\1\23\1\24\1\6\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\3\1\44\2\45\1\46\2\3\1\47"+
    "\1\3\1\50\2\3\1\51\1\3\1\1\1\3\1\1"+
    "\2\3\2\52\1\53\3\3\2\54\1\55\1\56\1\57"+
    "\1\56\1\60\1\61\1\62\1\5\1\7\1\62\1\63"+
    "\1\64\1\65\1\66\1\17\1\20\1\21\1\22\1\23"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\67\1\41\1\70\1\71\1\72\2\3\3\73\2\72"+
    "\1\74\1\2\1\0\1\75\1\76\1\2\1\77\2\0"+
    "\1\100\6\6\1\101\1\102\2\0\3\6\1\103\2\6"+
    "\2\0\1\104\3\0\1\105\1\0\1\106\1\107\1\110"+
    "\7\6\1\111\12\6\1\112\12\6\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\6\12\0\1\6\1\121\1\122"+
    "\1\121\1\123\1\0\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\1\135\1\136\1\137\5\0"+
    "\2\104\2\140\1\141\1\142\1\140\3\0\1\104\3\143"+
    "\3\0\2\1\1\104\2\144\1\0\1\145\10\0\1\146"+
    "\1\0\1\147\1\150\2\0\1\151\2\0\1\152\1\153"+
    "\1\154\2\0\1\77\1\0\1\155\7\6\2\77\1\156"+
    "\1\6\1\157\2\6\1\0\1\160\6\6\1\161\3\6"+
    "\1\162\2\6\1\163\1\6\1\164\1\165\22\6\1\166"+
    "\1\167\12\0\7\6\1\170\1\171\2\0\1\172\1\0"+
    "\1\173\1\0\2\131\2\137\2\0\1\174\1\46\1\174"+
    "\1\50\1\174\1\175\1\1\1\175\2\1\1\174\1\176"+
    "\1\0\1\176\1\0\2\150\1\177\2\0\6\6\1\200"+
    "\1\201\1\6\1\202\23\6\1\203\11\6\1\204\1\6"+
    "\1\205\5\6\12\0\10\6\4\0\1\206\3\0\1\46"+
    "\1\50\1\1\2\0\1\6\1\207\5\6\1\210\1\6"+
    "\1\211\1\212\4\6\1\213\1\6\1\214\1\215\3\6"+
    "\1\216\2\6\1\217\1\6\1\220\1\6\1\221\1\222"+
    "\1\223\4\6\1\224\1\225\2\6\1\226\2\6\5\0"+
    "\1\227\6\0\10\6\2\230\4\0\1\231\4\232\2\233"+
    "\1\0\2\6\1\234\2\6\1\235\7\6\1\236\6\6"+
    "\1\237\1\240\1\241\1\6\1\242\1\243\2\6\4\0"+
    "\1\244\5\0\1\245\10\6\4\0\1\45\1\0\1\246"+
    "\6\6\1\247\3\6\1\250\1\251\1\252\1\6\1\253"+
    "\2\6\1\254\1\255\1\6\1\256\3\0\1\257\1\0"+
    "\1\260\7\6\2\261\3\0\3\6\1\262\1\263\5\6"+
    "\1\264\1\6\1\265\2\6\1\266\1\267\1\270\3\6"+
    "\1\271\2\6\4\0\2\6\1\272\1\273\1\6\1\274"+
    "\2\6\1\275\1\6\1\276\2\6\1\277\2\6\3\0"+
    "\1\300\1\301\1\6\1\302\1\303\4\6\1\304\5\0"+
    "\5\6\5\0\1\305\1\306\1\307\2\6\1\310\2\0"+
    "\1\311\1\6\1\0\1\6\1\0\1\6\7\0\1\312"+
    "\7\0\1\76\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[752];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u0594"+
    "\0\u083c\0\u0880\0\u08c4\0\u0594\0\u0594\0\u0594\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c"+
    "\0\u0dd0\0\u0e14\0\u0e58\0\u0594\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68"+
    "\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u0594\0\u0594\0\u0594"+
    "\0\u0594\0\u1100\0\u0594\0\u0594\0\u1144\0\u0594\0\u0594\0\u1188"+
    "\0\u11cc\0\u1210\0\u1254\0\u0594\0\u1298\0\u12dc\0\u1320\0\u1364"+
    "\0\u0594\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u0594"+
    "\0\u1540\0\u0594\0\u1584\0\u15c8\0\u160c\0\u0594\0\u1650\0\u0594"+
    "\0\u0594\0\u1694\0\u16d8\0\u0594\0\u171c\0\u1760\0\u0594\0\u0594"+
    "\0\u17a4\0\u0594\0\u0594\0\u0594\0\u0594\0\u0594\0\u0594\0\u0594"+
    "\0\u0594\0\u0594\0\u0594\0\u0594\0\u0594\0\u0594\0\u0594\0\u0594"+
    "\0\u0594\0\u0594\0\u0594\0\u0594\0\u0594\0\u17e8\0\u182c\0\u1870"+
    "\0\u18b4\0\u18f8\0\u193c\0\u0594\0\u0594\0\u1980\0\u0594\0\u04c8"+
    "\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u0594"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u0594\0\u0594"+
    "\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u07f8\0\u1e8c\0\u1ed0"+
    "\0\u1f14\0\u1144\0\u1f58\0\u08c4\0\u1f9c\0\u1fe0\0\u0594\0\u2024"+
    "\0\u2068\0\u0594\0\u07f8\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc"+
    "\0\u2200\0\u2244\0\u07f8\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398"+
    "\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u07f8\0\u2530\0\u2574"+
    "\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794"+
    "\0\u0594\0\u0594\0\u0594\0\u0594\0\u27d8\0\u0594\0\u281c\0\u2860"+
    "\0\u28a4\0\u0e58\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c"+
    "\0\u2a80\0\u2ac4\0\u2b08\0\u0594\0\u0594\0\u2b4c\0\u2b90\0\u0594"+
    "\0\u2bd4\0\u0594\0\u2c18\0\u0594\0\u2c5c\0\u0594\0\u0594\0\u0594"+
    "\0\u0594\0\u0594\0\u2ca0\0\u2ce4\0\u2d28\0\u1210\0\u2d6c\0\u2db0"+
    "\0\u2df4\0\u2e38\0\u2d6c\0\u0594\0\u0594\0\u0594\0\u2db0\0\u1320"+
    "\0\u2e7c\0\u2ec0\0\u2f04\0\u2e7c\0\u0594\0\u2ec0\0\u1430\0\u2f48"+
    "\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u2f48\0\u2f8c\0\u1540\0\u0594"+
    "\0\u309c\0\u1584\0\u160c\0\u15c8\0\u30e0\0\u3124\0\u3168\0\u1650"+
    "\0\u0594\0\u31ac\0\u0594\0\u31f0\0\u3234\0\u3278\0\u0594\0\u1870"+
    "\0\u32bc\0\u0594\0\u0594\0\u0594\0\u3300\0\u3344\0\u3388\0\u3388"+
    "\0\u0594\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564"+
    "\0\u1d38\0\u1d7c\0\u07f8\0\u35a8\0\u07f8\0\u35ec\0\u3630\0\u3674"+
    "\0\u0594\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u07f8"+
    "\0\u3850\0\u3894\0\u38d8\0\u07f8\0\u391c\0\u3960\0\u39a4\0\u39e8"+
    "\0\u07f8\0\u07f8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80"+
    "\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0"+
    "\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u0594\0\u07f8\0\u3ef4\0\u3f38"+
    "\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158"+
    "\0\u419c\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u0594"+
    "\0\u0594\0\u4378\0\u43bc\0\u0594\0\u4400\0\u4444\0\u4488\0\u44cc"+
    "\0\u0594\0\u4510\0\u0594\0\u4554\0\u4598\0\u0594\0\u45dc\0\u11cc"+
    "\0\u4620\0\u12dc\0\u0594\0\u4664\0\u1474\0\u46a8\0\u46ec\0\u13ec"+
    "\0\u0594\0\u4730\0\u160c\0\u4774\0\u3234\0\u3278\0\u0594\0\u47b8"+
    "\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994\0\u07f8"+
    "\0\u49d8\0\u4a1c\0\u07f8\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70"+
    "\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90"+
    "\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28\0\u07f8\0\u4f6c"+
    "\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u50c0\0\u5104\0\u5148\0\u518c"+
    "\0\u07f8\0\u51d0\0\u07f8\0\u5214\0\u5258\0\u529c\0\u52e0\0\u5324"+
    "\0\u5368\0\u53ac\0\u53f0\0\u5434\0\u5478\0\u54bc\0\u5500\0\u5544"+
    "\0\u5588\0\u55cc\0\u5610\0\u5654\0\u5698\0\u56dc\0\u5720\0\u5764"+
    "\0\u57a8\0\u57ec\0\u5830\0\u5874\0\u58b8\0\u58fc\0\u0594\0\u5940"+
    "\0\u5984\0\u59c8\0\u5a0c\0\u5a50\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60"+
    "\0\u07f8\0\u5ba4\0\u5be8\0\u5c2c\0\u5c70\0\u5cb4\0\u07f8\0\u5cf8"+
    "\0\u07f8\0\u07f8\0\u5d3c\0\u5d80\0\u5dc4\0\u5e08\0\u07f8\0\u5e4c"+
    "\0\u07f8\0\u07f8\0\u5e90\0\u5ed4\0\u5f18\0\u5f5c\0\u5fa0\0\u5fe4"+
    "\0\u07f8\0\u6028\0\u07f8\0\u606c\0\u07f8\0\u07f8\0\u07f8\0\u60b0"+
    "\0\u60f4\0\u6138\0\u617c\0\u07f8\0\u07f8\0\u61c0\0\u6204\0\u07f8"+
    "\0\u6248\0\u628c\0\u62d0\0\u6314\0\u6358\0\u639c\0\u63e0\0\u0594"+
    "\0\u6424\0\u6468\0\u64ac\0\u64f0\0\u6534\0\u6578\0\u65bc\0\u6600"+
    "\0\u6644\0\u6688\0\u66cc\0\u6710\0\u6754\0\u6798\0\u67dc\0\u0594"+
    "\0\u6820\0\u6864\0\u68a8\0\u68ec\0\u6930\0\u0594\0\u11cc\0\u12dc"+
    "\0\u13ec\0\u6974\0\u0594\0\u69b8\0\u69fc\0\u6a40\0\u6a84\0\u6ac8"+
    "\0\u6b0c\0\u07f8\0\u6b50\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60\0\u6ca4"+
    "\0\u6ce8\0\u07f8\0\u6d2c\0\u6d70\0\u6db4\0\u6df8\0\u6e3c\0\u6e80"+
    "\0\u07f8\0\u07f8\0\u07f8\0\u6ec4\0\u07f8\0\u07f8\0\u6f08\0\u6f4c"+
    "\0\u6f90\0\u6fd4\0\u7018\0\u705c\0\u0594\0\u70a0\0\u70e4\0\u7128"+
    "\0\u716c\0\u71b0\0\u0594\0\u71f4\0\u7238\0\u727c\0\u72c0\0\u7304"+
    "\0\u7348\0\u738c\0\u73d0\0\u7414\0\u7458\0\u749c\0\u74e0\0\u7524"+
    "\0\u7568\0\u07f8\0\u75ac\0\u75f0\0\u7634\0\u7678\0\u76bc\0\u7700"+
    "\0\u7744\0\u7788\0\u77cc\0\u7810\0\u07f8\0\u07f8\0\u07f8\0\u7854"+
    "\0\u07f8\0\u7898\0\u78dc\0\u7920\0\u07f8\0\u7964\0\u0594\0\u79a8"+
    "\0\u79ec\0\u7a30\0\u0594\0\u7a74\0\u07f8\0\u7ab8\0\u7afc\0\u7b40"+
    "\0\u7b84\0\u7bc8\0\u7c0c\0\u7c50\0\u7c94\0\u0594\0\u7cd8\0\u7d1c"+
    "\0\u7d60\0\u7da4\0\u7de8\0\u7e2c\0\u07f8\0\u07f8\0\u7e70\0\u7eb4"+
    "\0\u7ef8\0\u7f3c\0\u7f80\0\u07f8\0\u7fc4\0\u07f8\0\u8008\0\u804c"+
    "\0\u0594\0\u0594\0\u07f8\0\u8090\0\u80d4\0\u8118\0\u07f8\0\u815c"+
    "\0\u81a0\0\u81e4\0\u8228\0\u826c\0\u82b0\0\u82f4\0\u8338\0\u07f8"+
    "\0\u07f8\0\u837c\0\u07f8\0\u83c0\0\u8404\0\u07f8\0\u8448\0\u07f8"+
    "\0\u848c\0\u84d0\0\u07f8\0\u8514\0\u8558\0\u859c\0\u85e0\0\u8624"+
    "\0\u07f8\0\u07f8\0\u8668\0\u07f8\0\u07f8\0\u86ac\0\u86f0\0\u8734"+
    "\0\u8778\0\u07f8\0\u87bc\0\u8800\0\u8844\0\u8888\0\u88cc\0\u8910"+
    "\0\u8954\0\u8998\0\u89dc\0\u8a20\0\u8a64\0\u8aa8\0\u8aec\0\u8b30"+
    "\0\u8b74\0\u07f8\0\u07f8\0\u07f8\0\u8bb8\0\u8bfc\0\u0594\0\u8c40"+
    "\0\u8c84\0\u07f8\0\u8cc8\0\u8d0c\0\u8d50\0\u8d94\0\u8dd8\0\u8e1c"+
    "\0\u8e60\0\u8ea4\0\u8ee8\0\u8f2c\0\u8f70\0\u8fb4\0\u0594\0\u8ff8"+
    "\0\u903c\0\u9080\0\u90c4\0\u9108\0\u914c\0\u9190\0\u0594\0\u91d4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[752];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\63\24\1\25\20\24\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\27\2\37\1\26\1\40"+
    "\3\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\37\1\64\1\37\1\65\1\66"+
    "\1\37\1\67\1\70\1\71\1\72\1\73\1\74\1\37"+
    "\1\75\1\37\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\60\1\115\1\116\35\117\1\120\46\117\15\121"+
    "\1\122\3\121\1\123\1\124\1\121\1\125\57\121\15\126"+
    "\1\127\3\126\1\130\1\126\1\131\1\132\57\126\15\133"+
    "\1\134\1\135\1\133\1\135\1\136\2\133\1\137\57\133"+
    "\3\140\1\141\2\140\3\141\1\140\2\141\13\140\22\141"+
    "\3\140\1\141\2\140\3\141\17\140\1\141\2\140\104\142"+
    "\3\143\1\144\2\143\3\144\2\143\1\144\2\143\1\145"+
    "\1\143\1\145\6\143\22\144\3\143\1\144\2\143\3\144"+
    "\17\143\1\144\2\143\3\146\1\147\2\146\3\147\1\146"+
    "\2\147\13\146\22\147\3\146\1\147\2\146\3\147\17\146"+
    "\1\147\2\146\104\150\3\151\1\152\2\151\3\152\1\151"+
    "\2\152\2\151\3\41\6\151\22\152\1\153\2\151\1\152"+
    "\2\151\3\152\17\151\1\152\2\151\3\154\1\155\2\154"+
    "\3\155\1\154\2\155\13\154\22\155\3\154\1\155\2\154"+
    "\3\155\17\154\1\155\2\154\1\26\1\156\1\157\1\37"+
    "\1\160\1\161\3\37\1\156\2\37\1\26\4\162\1\42"+
    "\1\163\1\164\1\165\1\46\1\166\22\37\1\167\1\170"+
    "\1\171\1\37\1\172\1\74\3\37\1\173\1\174\1\175"+
    "\1\176\1\177\1\200\1\201\1\202\1\106\1\107\1\203"+
    "\1\111\1\204\1\113\1\205\1\37\2\162\64\206\1\207"+
    "\17\206\64\210\1\211\17\210\16\212\1\213\1\212\1\214"+
    "\31\212\1\215\13\212\1\216\7\212\1\216\5\212\26\0"+
    "\1\217\55\0\104\220\63\24\1\221\103\24\1\0\2\24"+
    "\1\222\7\24\1\223\2\24\1\224\2\24\105\0\1\27"+
    "\1\225\1\226\1\0\1\27\3\0\1\27\73\0\1\225"+
    "\1\227\2\0\1\225\3\0\1\225\14\0\1\230\56\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\231\6\37\12\0"+
    "\5\37\1\232\1\233\4\37\1\234\5\37\1\235\3\0"+
    "\1\236\2\0\3\37\17\0\1\37\6\0\1\237\21\0"+
    "\1\240\56\0\1\27\1\225\1\226\1\0\1\27\1\241"+
    "\1\0\1\242\1\27\73\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\7\37\1\243\12\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\3\37\1\244\4\37\12\0\5\37\1\245\2\37\1\246"+
    "\1\247\10\37\3\0\1\37\2\0\3\37\17\0\1\246"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\5\0\1\43"+
    "\4\0\11\37\1\250\10\37\3\0\1\37\2\0\3\37"+
    "\1\0\1\251\15\0\1\37\1\252\2\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\22\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\20\0\3\41\66\0\1\253\2\0"+
    "\3\253\1\0\2\253\13\0\22\253\3\0\1\253\2\0"+
    "\3\253\17\0\1\253\2\0\15\254\1\255\3\254\1\256"+
    "\1\257\1\254\1\260\57\254\26\0\1\261\23\0\1\262"+
    "\32\0\1\37\1\0\1\37\1\0\10\37\12\0\3\37"+
    "\1\263\1\37\1\264\2\37\1\265\10\37\1\266\3\0"+
    "\1\37\2\0\3\37\17\0\1\265\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\11\37\1\267\2\37\1\270"+
    "\5\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\271\1\0\10\37\12\0\1\272\6\37"+
    "\1\273\12\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\1\274"+
    "\3\37\1\275\2\37\1\276\12\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\5\37\1\277\2\37\1\300\11\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\300\3\0\1\37\1\0"+
    "\1\301\1\0\2\37\1\302\5\37\12\0\22\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\2\37\1\303\5\37\12\0\7\37\1\304"+
    "\3\37\1\305\6\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\11\37\1\306\10\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\37\1\307\13\37\1\310\4\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\311\1\0"+
    "\10\37\12\0\22\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\312\21\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\1\313"+
    "\21\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\14\37\1\314"+
    "\5\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\7\37\1\315"+
    "\3\37\1\316\6\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\4\37\1\317\4\37\1\320\10\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\30\0\1\321\22\0\1\322\1\323"+
    "\57\0\1\324\23\0\1\325\104\0\1\326\31\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\327\5\37\12\0\22\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\11\0\1\330"+
    "\1\331\6\0\1\332\7\0\1\333\1\0\1\334\1\335"+
    "\1\336\2\0\1\337\1\340\1\341\40\0\1\340\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\22\37\3\0"+
    "\1\37\2\0\1\37\1\342\1\37\17\0\1\37\30\0"+
    "\1\343\103\0\1\344\23\0\1\345\10\0\1\346\1\0"+
    "\1\347\44\0\1\350\35\0\1\351\45\0\1\352\35\0"+
    "\1\353\1\116\44\0\1\354\23\0\1\355\57\0\1\356"+
    "\40\0\1\357\42\0\1\360\41\0\1\361\41\0\1\362"+
    "\127\0\1\363\31\0\15\252\1\364\64\252\1\257\1\252"+
    "\42\0\1\365\41\0\15\121\1\366\3\121\1\367\1\0"+
    "\1\121\1\370\166\121\1\371\2\121\3\371\1\121\1\372"+
    "\1\371\1\121\1\366\3\121\1\373\1\374\1\121\1\375"+
    "\2\121\22\371\3\121\1\371\2\121\3\371\17\121\1\371"+
    "\17\121\1\366\3\121\1\376\1\374\1\121\1\377\57\121"+
    "\15\126\1\u0100\3\126\1\u0101\1\126\1\0\1\u0102\166\126"+
    "\1\371\2\126\3\371\1\126\1\u0103\1\371\1\126\1\u0100"+
    "\3\126\1\u0104\1\126\1\u0105\1\375\2\126\22\371\3\126"+
    "\1\371\2\126\3\371\17\126\1\371\17\126\1\u0100\3\126"+
    "\1\376\1\126\1\u0105\1\u0106\57\126\15\133\1\u0107\1\135"+
    "\1\133\1\135\1\u0108\2\133\1\u0109\75\133\1\135\1\133"+
    "\1\135\66\133\1\u010a\2\133\3\u010a\1\133\1\u010b\1\u010a"+
    "\1\133\1\u0107\1\135\1\133\1\135\1\u0108\2\133\1\u0109"+
    "\2\133\22\u010a\3\133\1\u010a\2\133\3\u010a\17\133\1\u010a"+
    "\5\133\1\371\2\133\3\371\1\133\1\u010c\1\371\1\133"+
    "\1\u0107\1\135\1\133\1\135\1\u010d\2\133\1\375\2\133"+
    "\22\371\3\133\1\371\2\133\3\371\17\133\1\371\17\133"+
    "\1\u0107\1\135\1\133\1\135\1\376\2\133\1\u010e\57\133"+
    "\1\0\1\u010f\1\0\1\u010f\1\0\10\u010f\1\0\1\u0110"+
    "\1\0\1\u0110\4\0\1\u0111\1\0\22\u010f\3\0\1\u010f"+
    "\2\0\3\u010f\17\0\1\u010f\2\0\16\u0112\1\u0113\1\u0112"+
    "\1\u0113\64\u0112\1\u0114\1\u0112\1\u0114\1\u0112\5\u0114\1\u0112"+
    "\1\u0114\2\u0112\1\0\1\u0112\1\0\4\u0112\1\u0115\1\u0112"+
    "\22\u0114\3\u0112\1\u0114\2\u0112\3\u0114\17\u0112\1\u0114\5\u0112"+
    "\1\u0116\2\u0112\3\u0116\1\u0112\1\u0117\1\u0116\2\u0112\1\u0113"+
    "\1\u0112\1\u0113\6\u0112\22\u0116\3\u0112\1\u0116\2\u0112\3\u0116"+
    "\17\u0112\1\u0116\2\u0112\1\0\1\u0118\1\0\1\u0118\1\0"+
    "\10\u0118\1\0\1\u0119\1\0\1\u0119\4\0\1\u011a\1\0"+
    "\22\u0118\3\0\1\u0118\2\0\3\u0118\17\0\1\u0118\3\0"+
    "\1\152\1\0\1\152\1\0\10\152\12\0\22\152\3\0"+
    "\1\152\2\0\3\152\17\0\1\152\54\0\1\u011b\32\0"+
    "\1\155\1\0\1\155\1\0\10\155\12\0\22\155\3\0"+
    "\1\155\2\0\3\155\17\0\1\155\3\0\1\156\3\0"+
    "\1\156\3\0\1\156\73\0\1\u011c\3\0\1\u011c\1\u011d"+
    "\1\0\1\u011e\1\u011c\72\0\64\206\1\0\17\206\65\0"+
    "\1\u011f\16\0\64\u0120\1\u0121\103\u0120\1\u0121\1\u0122\16\u0120"+
    "\16\212\1\213\1\212\1\214\31\212\1\214\13\212\1\214"+
    "\7\212\1\214\5\212\20\0\1\214\135\0\1\u0123\31\0"+
    "\63\24\1\0\2\24\1\0\7\24\1\0\2\24\1\0"+
    "\2\24\26\0\1\u0124\103\0\1\u0124\20\0\1\u0125\71\0"+
    "\1\u0126\47\0\1\225\1\0\1\226\1\0\1\225\3\0"+
    "\1\225\73\0\1\u0127\2\0\1\u0128\1\u0127\3\0\1\u0127"+
    "\37\0\1\u0128\34\0\1\u0129\102\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\1\u012a\1\u012b\20\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\2\37\1\u012c\17\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\14\37\1\u012d\5\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\10\37\1\u012e\11\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\u012e\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\20\37\1\u012f\1\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u0130\5\37\12\0\22\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\u0131\1\0\1\u0131"+
    "\1\0\1\u0131\1\0\3\u0131\17\0\2\u0131\2\0\1\u0131"+
    "\53\0\1\u0132\3\0\1\u0132\73\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\11\37\1\u0133\10\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\10\37\1\u0134\11\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\u0134\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\2\37\1\u0135\17\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\11\37\1\u0136\10\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\u0137"+
    "\1\0\10\37\12\0\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\65\0\1\u0138\21\0\1\253\1\0\1\253"+
    "\1\0\10\253\12\0\22\253\3\0\1\253\2\0\3\253"+
    "\17\0\1\253\2\0\107\254\1\0\2\254\3\0\2\254"+
    "\1\0\1\254\1\255\3\254\1\256\1\257\1\254\1\0"+
    "\2\254\22\0\3\254\1\0\2\254\3\0\17\254\1\0"+
    "\17\254\1\255\3\254\1\0\1\257\1\254\1\260\57\254"+
    "\26\0\1\u0139\56\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\1\37\1\u013a\4\37\1\u013b\1\37\1\u013c\11\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\u013c\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\10\37\1\u013d\11\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\u013d\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\20\37\1\u013e\1\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u013f\5\37\12\0\12\37"+
    "\1\u0140\7\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\11\37"+
    "\1\u0141\10\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\3\37"+
    "\1\u0142\2\37\1\u0143\13\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\u0144\1\0\10\37"+
    "\12\0\22\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\5\37"+
    "\1\u0145\14\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\5\37"+
    "\1\u0146\14\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\11\37"+
    "\1\u0147\10\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\10\37"+
    "\1\u0148\11\37\3\0\1\37\2\0\3\37\17\0\1\u0148"+
    "\3\0\1\37\1\0\1\u0149\1\0\10\37\12\0\22\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\15\37\1\u014a\4\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\21\37\1\u014b\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u014c\6\37\1\u014d"+
    "\11\37\3\0\1\37\2\0\3\37\17\0\1\u014d\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\5\37\1\u014e"+
    "\14\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\2\37\1\u014f\5\37\12\0"+
    "\7\37\1\u0150\12\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\2\37\1\u0151"+
    "\5\37\12\0\22\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\u0152\21\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\1\37"+
    "\1\u0153\20\37\3\0\1\37\2\0\2\37\1\u0154\17\0"+
    "\1\37\3\0\1\37\1\0\1\u0155\1\0\10\37\12\0"+
    "\22\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\10\37\1\u0156"+
    "\11\37\3\0\1\37\2\0\3\37\17\0\1\u0156\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\1\u0157\21\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\1\37\1\u0158\20\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\7\37\1\u0159\12\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\3\37\1\u015a\4\37\12\0\22\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\1\u015b\6\37\1\u015c"+
    "\12\37\3\0\1\37\2\0\3\37\17\0\1\37\30\0"+
    "\1\u015d\56\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\11\37\1\u015e\10\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\42\0\1\u015f\72\0\1\u0160\6\0\1\u0161\101\0"+
    "\1\u0162\105\0\1\u0163\107\0\1\u0164\75\0\1\u0165\57\0"+
    "\1\u0166\123\0\1\u0167\56\0\1\u0168\101\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\2\37\1\u0169\1\u016a\1\37"+
    "\1\u016b\1\u016c\4\37\1\u016d\1\u016e\4\37\1\u016f\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\30\0\1\u0170\103\0"+
    "\1\u0171\34\0\1\u0172\57\0\1\u0173\41\0\1\u0173\30\0"+
    "\1\u0174\73\0\3\u0175\43\0\1\u0176\12\0\1\u0177\22\0"+
    "\1\u0178\1\0\1\u0179\101\0\1\u017a\1\0\1\u017b\63\0"+
    "\104\252\7\0\1\u017c\74\0\3\121\1\0\2\121\3\0"+
    "\2\121\1\0\1\121\1\366\3\121\1\373\1\374\1\121"+
    "\1\0\2\121\22\0\3\121\1\0\2\121\3\0\17\121"+
    "\1\0\17\121\1\366\3\121\1\0\1\374\1\121\1\377"+
    "\57\121\1\0\1\371\1\0\1\371\1\0\10\371\12\0"+
    "\22\371\1\u017d\2\0\1\371\2\0\3\371\11\0\1\u017e"+
    "\5\0\1\371\2\0\1\121\1\372\1\121\1\372\1\121"+
    "\10\372\1\366\3\121\1\367\1\0\1\121\1\370\2\121"+
    "\22\372\1\u017f\2\121\1\372\2\121\3\372\11\121\1\u0180"+
    "\5\121\1\372\2\121\3\126\1\0\2\126\3\0\2\126"+
    "\1\0\1\126\1\u0100\3\126\1\u0104\1\126\1\u0105\1\0"+
    "\2\126\22\0\3\126\1\0\2\126\3\0\17\126\1\0"+
    "\17\126\1\u0100\3\126\1\0\1\126\1\u0105\1\u0106\60\126"+
    "\1\u0103\1\126\1\u0103\1\126\10\u0103\1\u0100\3\126\1\u0101"+
    "\1\126\1\0\1\u0102\2\126\22\u0103\1\u0181\2\126\1\u0103"+
    "\2\126\3\u0103\11\126\1\u0182\5\126\1\u0103\2\126\3\133"+
    "\1\0\2\133\3\0\2\133\1\0\1\133\1\u0107\1\135"+
    "\1\133\1\135\1\u010d\2\133\1\0\2\133\22\0\3\133"+
    "\1\0\2\133\3\0\17\133\1\0\17\133\1\u0107\1\135"+
    "\1\133\1\135\1\0\2\133\1\u010e\60\133\1\u010a\1\133"+
    "\1\u010a\1\133\5\u010a\1\u010b\1\u010a\1\u010b\1\u0107\1\u0183"+
    "\1\133\1\u0183\1\u0108\2\133\1\u0109\1\u0184\1\133\22\u010a"+
    "\3\133\1\u010a\2\133\3\u010a\17\133\1\u010a\3\133\1\u010b"+
    "\1\133\1\u010b\1\133\10\u010b\1\u0107\1\u0185\1\133\1\u0185"+
    "\1\u0108\2\133\1\u0109\1\u0186\1\133\22\u010b\3\133\1\u010b"+
    "\2\133\3\u010b\17\133\1\u010b\3\133\1\u010c\1\133\1\u010c"+
    "\1\133\10\u010c\1\u0107\1\135\1\133\1\135\1\u0108\2\133"+
    "\1\u0109\2\133\22\u010c\1\u0187\2\133\1\u010c\2\133\3\u010c"+
    "\11\133\1\u0188\5\133\1\u010c\2\133\16\0\1\u0110\1\0"+
    "\1\u0110\63\0\16\u0112\1\0\1\u0112\1\0\64\u0112\1\u0116"+
    "\1\u0112\1\u0116\1\u0112\5\u0116\1\u0117\1\u0116\1\u0117\1\u0112"+
    "\1\u0189\1\u0112\1\u0189\4\u0112\1\u018a\1\u0112\22\u0116\3\u0112"+
    "\1\u0116\2\u0112\3\u0116\17\u0112\1\u0116\3\u0112\1\u0117\1\u0112"+
    "\1\u0117\1\u0112\10\u0117\1\u0112\1\u018b\1\u0112\1\u018b\4\u0112"+
    "\1\u018c\1\u0112\22\u0117\3\u0112\1\u0117\2\u0112\3\u0117\17\u0112"+
    "\1\u0117\2\u0112\16\0\1\u0119\1\0\1\u0119\64\0\1\u011c"+
    "\3\0\1\u011c\3\0\1\u011c\73\0\1\u018d\1\0\1\u018d"+
    "\1\0\1\u018d\1\0\3\u018d\17\0\2\u018d\2\0\1\u018d"+
    "\53\0\1\u018e\3\0\1\u018e\72\0\64\u0120\1\u0121\1\u018f"+
    "\16\u0120\43\0\1\u0190\100\0\1\u0191\44\0\1\u0127\3\0"+
    "\1\u0127\3\0\1\u0127\73\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\37\1\u0144\20\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\u0192\1\0"+
    "\10\37\12\0\22\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\u0193\1\37\1\u0194\1\u0195\4\37\1\u0196\4\37\1\u0197"+
    "\4\37\3\0\1\37\2\0\3\37\17\0\1\u0196\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\7\37\1\u0198"+
    "\12\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\u0199\1\0\10\37\12\0\22\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u019a\20\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\13\37\1\u019b\6\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u019c\20\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\2\37\1\u019d\5\37\12\0\22\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\2\37\1\u019e\5\37\12\0\22\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\65\0\1\u0172\21\0"+
    "\1\37\1\0\1\u019f\1\0\10\37\12\0\22\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\13\37\1\u01a0\6\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u01a1\20\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\u01a2\1\0\10\37\12\0\22\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\13\37\1\u01a3\6\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\u01a4\21\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\7\37\1\u01a5\12\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\u01a6\5\37\12\0\1\u01a7\21\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\13\37\1\u01a8\6\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\2\37\1\u01a9\5\37\12\0\22\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\6\37\1\u01aa\13\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\u01ab\1\0"+
    "\10\37\12\0\22\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\u01ac\1\0\10\37\12\0"+
    "\22\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\u01ad\1\0\10\37\12\0\22\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\6\37\1\u01ae\13\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\u01af\1\0\10\37\12\0\22\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\37\1\u01b0\6\37\1\u01b1\11\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\u01b1\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\10\37\1\u01b2\11\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\u01b2\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\5\37\1\u01b3\14\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u01b4\20\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u01b5\20\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\4\37\1\u01b6\15\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\4\37\1\u01b7\15\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\13\37\1\u01b8\6\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u01b9\20\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\13\37\1\u01ba\6\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\7\37\1\u01bb\12\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\3\37\1\u01bc\4\37\12\0\22\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\13\37\1\u01bd\6\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\5\37\1\u01be\14\37\3\0"+
    "\1\u01bf\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u01c0\20\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\42\0\1\u01c1\77\0"+
    "\1\u01c2\105\0\1\u01c3\75\0\1\u01c4\106\0\1\u01c5\106\0"+
    "\1\u01c6\104\0\1\u01c7\41\0\1\u01c7\61\0\1\u01c8\64\0"+
    "\1\u01c9\52\0\1\u01ca\75\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\u01cb\21\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\1\u01cc\3\37\1\u01cd\15\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\2\37\1\u01ce\5\37\12\0\22\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\13\37\1\u01cf\6\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\u01d0\21\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\u01d1\5\37\12\0\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\u01d2\1\0\10\37"+
    "\12\0\22\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\5\0\1\u01d3\2\0\3\u01d3\1\0\2\u01d3\3\0\1\u0172"+
    "\2\0\1\u01d4\4\0\22\u01d3\3\0\1\u01d3\2\0\3\u01d3"+
    "\17\0\1\u01d3\1\u01d5\36\0\1\u01d6\64\0\3\u0175\56\0"+
    "\1\u0177\71\0\1\u01d7\72\0\1\u01d8\47\0\1\u0179\103\0"+
    "\1\u017b\122\0\1\u01d9\41\0\1\u01d9\54\0\1\u01da\31\0"+
    "\15\121\1\366\3\121\1\367\1\0\1\121\1\370\25\121"+
    "\1\u01db\31\121\15\126\1\u0100\3\126\1\u0101\1\126\1\0"+
    "\1\u0102\25\126\1\u01dc\31\126\15\133\1\u0107\1\u0183\1\133"+
    "\1\u0183\1\u0108\2\133\1\u0109\74\133\1\u0107\1\u0185\1\133"+
    "\1\u0185\1\u0108\2\133\1\u0109\74\133\1\u0107\1\135\1\133"+
    "\1\135\1\u0108\2\133\1\u0109\25\133\1\u01dd\31\133\16\u0112"+
    "\1\u0189\1\u0112\1\u0189\101\u0112\1\u018b\1\u0112\1\u018b\63\u0112"+
    "\47\0\1\u01de\63\0\1\u01df\55\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\5\37\1\u01e0\14\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\3\37\1\u01e1\16\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\u01e2"+
    "\1\0\10\37\12\0\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\7\37\1\u01e3\12\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\15\37\1\u01e4\4\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\14\37\1\u01e5\5\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\1\u01e6\21\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\12\37\1\u01e7\7\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\11\37\1\u01e8\10\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\12\37\1\u01e9\7\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\16\37\1\u01ea\3\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\11\37\1\u01eb\10\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\4\37\1\u01ec\15\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\u01ed\1\0\2\37\1\u01ee"+
    "\5\37\12\0\22\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\37\1\u01ef\20\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\u01f0\1\0\10\37\12\0"+
    "\22\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\1\37\1\u01f1"+
    "\20\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\15\37\1\u01f2"+
    "\4\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\4\37\1\u01f3"+
    "\15\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\5\37\1\u01f4"+
    "\14\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\2\37\1\u01f5\5\37\12\0"+
    "\22\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\13\37\1\u01f6"+
    "\6\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\1\37\1\u01f7"+
    "\20\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\2\37\1\u01f8\5\37\12\0"+
    "\22\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\1\37\1\u01f9"+
    "\20\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\10\37\1\u01fa"+
    "\11\37\3\0\1\37\2\0\3\37\17\0\1\u01fa\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\14\37\1\u01fb"+
    "\5\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\1\u01fc\21\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\1\37\1\u01fd\20\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\10\37\1\u01fe\11\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\u01fe\3\0\1\37"+
    "\1\0\1\u01ff\1\0\10\37\12\0\22\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\1\u0200\21\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\6\37\1\u0201\13\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\11\37\1\u0202\10\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\u0203\21\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\u0204\17\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\u0205\1\0\10\37"+
    "\12\0\22\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\2\37\1\u0206\5\37"+
    "\12\0\22\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\1\u0207"+
    "\21\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\1\37\1\u0208"+
    "\20\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\2\37\1\u0209\5\37\12\0"+
    "\22\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\u020a\1\0\10\37\12\0\22\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\11\0\1\u020b\103\0"+
    "\1\u020c\136\0\1\u020d\44\0\1\u020e\13\0\1\u020f\36\0"+
    "\1\u0210\35\0\1\u0211\102\0\1\u0212\77\0\1\u0213\103\0"+
    "\1\u0214\127\0\1\u0215\116\0\1\u0216\42\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\11\37\1\u0217\10\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\13\37\1\u0218\6\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\5\37\1\u0219\14\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\21\37\1\u021a\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u021b\5\37\12\0\22\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\5\37\1\u021c\14\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\13\37\1\u021d\6\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\1\37\1\u021e\20\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\u01d3\1\0\1\u01d3"+
    "\1\0\10\u01d3\1\0\1\u021f\1\0\1\u0220\6\0\22\u01d3"+
    "\3\0\1\u01d3\2\0\3\u01d3\17\0\1\u01d3\5\0\1\u0221"+
    "\2\0\3\u0221\1\0\2\u0221\13\0\22\u0221\3\0\1\u0221"+
    "\2\0\3\u0221\17\0\1\u0221\5\0\1\u0222\2\0\3\u0222"+
    "\1\0\2\u0222\13\0\22\u0222\3\0\1\u0222\2\0\3\u0222"+
    "\17\0\1\u0222\42\0\1\u0223\52\0\1\u0224\133\0\1\u0225"+
    "\41\0\1\u0225\5\0\1\u0226\2\0\3\u0226\2\0\1\u0226"+
    "\13\0\22\u0226\3\0\1\u0226\2\0\3\u0226\17\0\1\u0226"+
    "\2\0\3\121\1\u0227\2\121\3\u0227\2\121\1\u0227\1\121"+
    "\1\366\3\121\1\367\1\0\1\121\1\370\2\121\22\u0227"+
    "\3\121\1\u0227\2\121\3\u0227\17\121\1\u0227\2\121\3\126"+
    "\1\u0228\2\126\3\u0228\2\126\1\u0228\1\126\1\u0100\3\126"+
    "\1\u0101\1\126\1\0\1\u0102\2\126\22\u0228\3\126\1\u0228"+
    "\2\126\3\u0228\17\126\1\u0228\2\126\3\133\1\u0229\2\133"+
    "\3\u0229\2\133\1\u0229\1\133\1\u0107\1\135\1\133\1\135"+
    "\1\u0108\2\133\1\u0109\2\133\22\u0229\3\133\1\u0229\2\133"+
    "\3\u0229\17\133\1\u0229\2\133\16\0\1\u022a\2\u022b\132\0"+
    "\1\u022c\35\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\2\37\1\u022d\17\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\6\37\1\u022e\13\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\11\37\1\u022f\10\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\u0230\21\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\1\u0231"+
    "\21\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\3\37\1\u0232"+
    "\16\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\2\37\1\u0233\5\37\12\0"+
    "\22\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\3\37\1\u0234"+
    "\16\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\2\37\1\u0235"+
    "\17\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\2\37\1\u0236\5\37\12\0"+
    "\22\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\5\37\1\u0237"+
    "\14\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\21\37\1\u0238"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\13\37\1\u0239\6\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\u023a\1\0\10\37\12\0\22\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\11\37\1\u023b\10\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\13\37\1\u023c\6\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\1\u023d\21\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\6\37\1\u023e\13\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\20\37\1\u023f\1\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\5\37\1\u0240\14\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\6\37\1\u0241\13\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\14\37\1\u0242\5\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\5\37\1\u0243\14\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\11\37\1\u0244\10\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\13\37\1\u0245\6\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\6\37\1\u0246\13\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\37\1\u0247\20\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\6\37\1\u0248\13\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\43\0\1\u0249\102\0\1\u024a\46\0"+
    "\1\u024b\13\0\1\u024c\36\0\1\u024d\73\0\1\u024e\54\0"+
    "\1\u020f\36\0\1\u0210\67\0\1\u024f\71\0\1\u0216\103\0"+
    "\1\u0250\110\0\1\u0251\102\0\1\u0252\66\0\1\u0216\36\0"+
    "\1\u0253\26\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\22\37\3\0\1\37\2\0\1\37\1\u0254\1\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\u0255\1\0\10\37\12\0"+
    "\22\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\6\37\1\u0256"+
    "\13\37\3\0\1\37\2\0\3\37\17\0\1\37\3\0"+
    "\1\37\1\0\1\u0257\1\0\10\37\12\0\22\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\10\37\1\u0258\11\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\u0258\3\0\1\37\1\0"+
    "\1\u0259\1\0\10\37\12\0\22\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\37\1\u025a\20\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\14\37\1\u025b\5\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\22\0\1\u0220\64\0\1\u0221\1\0"+
    "\1\u0221\1\0\10\u0221\5\0\1\u025c\4\0\22\u0221\3\0"+
    "\1\u0221\2\0\3\u0221\17\0\1\u0221\3\0\1\u0222\1\0"+
    "\1\u0222\1\0\10\u0222\12\0\22\u0222\3\0\1\u0222\2\0"+
    "\3\u0222\17\0\1\u0222\1\u025d\30\0\1\u025e\114\0\1\u025f"+
    "\46\0\1\u0260\2\0\3\u0260\1\0\2\u0260\13\0\22\u0260"+
    "\3\0\1\u0260\2\0\3\u0260\17\0\1\u0260\22\0\1\u022b"+
    "\113\0\1\u0261\54\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\10\37\1\u0262\11\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\u0262\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\13\37\1\u0263\6\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\u0264\1\0\10\37"+
    "\12\0\22\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\1\37"+
    "\1\u0265\20\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\13\37"+
    "\1\u0266\6\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\6\37"+
    "\1\u0267\13\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\2\37\1\u0268\5\37"+
    "\12\0\22\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\u0269\1\0\10\37\12\0\22\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\2\37\1\u026a\17\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\6\37\1\u026b\13\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\u026c\1\0\10\37\12\0\22\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\1\37\1\u026d\20\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\u026e"+
    "\1\0\10\37\12\0\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\12\37\1\u026f\7\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\7\37\1\u0270\12\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\14\37\1\u0271\5\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\u0272\5\37\12\0\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\4\37\1\u0273\15\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\u0274\1\0\10\37"+
    "\12\0\22\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\u0275\1\0\10\37\12\0\22\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\1\37\1\u0276\20\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\21\0\1\u0249"+
    "\36\0\1\u0277\66\0\1\u0278\51\0\1\u0279\113\0\1\u024c"+
    "\36\0\1\u024d\30\0\1\u027a\103\0\1\u0216\117\0\1\u0250"+
    "\36\0\1\u027b\55\0\1\u027c\121\0\1\u0278\36\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\22\37\3\0\1\37"+
    "\2\0\1\37\1\u027d\1\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\22\37\3\0\1\37"+
    "\2\0\1\37\1\u027e\1\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\1\37\1\u027f\20\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\10\37\1\u0280\11\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\u0280\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\10\37\1\u0281\11\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\u0281\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\22\37\3\0\1\37"+
    "\2\0\1\37\1\u0282\1\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\22\37\3\0\1\37"+
    "\2\0\1\37\1\u0283\1\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\7\37\1\u0284\12\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\20\0\1\u021f"+
    "\1\0\1\u0220\101\0\1\u0285\1\0\1\u0286\132\0\1\u0287"+
    "\52\0\3\u0288\64\0\1\u0260\1\0\1\u0260\1\0\10\u0260"+
    "\12\0\22\u0260\3\0\1\u0260\2\0\3\u0260\17\0\1\u0260"+
    "\20\0\3\u0289\64\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\u028a\5\37\12\0\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\u028b\5\37\12\0\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\6\37\1\u028c\13\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\u028d\1\0\10\37"+
    "\12\0\22\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\1\37"+
    "\1\u028e\20\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\6\37"+
    "\1\u028f\13\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\22\37"+
    "\3\0\1\37\2\0\1\37\1\u0290\1\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\37\1\0\10\37\12\0\7\37"+
    "\1\u0291\12\37\3\0\1\37\2\0\3\37\17\0\1\37"+
    "\3\0\1\37\1\0\1\u0292\1\0\10\37\12\0\22\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\5\37\1\u0293\14\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\5\37\1\u0294\14\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\6\37\1\u0295\13\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\u0296\1\0\10\37\12\0\22\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\22\37\3\0\1\37\2\0\1\37"+
    "\1\u0297\1\37\17\0\1\37\3\0\1\37\1\0\1\u0298"+
    "\1\0\10\37\12\0\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\21\0\1\u0278\36\0\1\u0299\61\0\1\u024c"+
    "\107\0\1\u020f\62\0\1\u027c\36\0\1\u029a\26\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\22\37\3\0\1\37"+
    "\2\0\1\37\1\u029b\1\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\1\u029c\21\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\20\37\1\u029d\1\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\22\37\3\0\1\37\2\0"+
    "\1\37\1\u029e\1\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\22\37\3\0\1\37\2\0"+
    "\1\37\1\u029f\1\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\6\37\1\u02a0\13\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\2\37\1\u02a1\17\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\22\0\1\u0286\113\0"+
    "\1\u02a2\56\0\1\u02a3\2\0\3\u02a3\1\0\2\u02a3\2\0"+
    "\3\u0288\1\u02a4\5\0\22\u02a3\3\0\1\u02a3\2\0\3\u02a3"+
    "\17\0\1\u02a3\20\0\3\u0289\21\0\1\u02a5\42\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\11\37\1\u02a6\10\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\6\37\1\u02a7\13\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\14\37\1\u02a8\5\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\u02a9\1\0\10\37\12\0\22\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\7\37\1\u02aa\12\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\3\37\1\u02ab\16\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\7\37\1\u02ac\12\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\37"+
    "\1\0\10\37\12\0\1\37\1\u02ad\20\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\u02ae"+
    "\1\0\10\37\12\0\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\7\37\1\u02af\12\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\u02b0\17\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\7\37\1\u02b1\12\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\2\37"+
    "\1\u02b2\5\37\12\0\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\22\37\3\0\1\37\2\0\1\37\1\u02b3\1\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\7\37\1\u02b4\12\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\22\37\3\0\1\37\2\0\1\37\1\u02b5\1\37"+
    "\17\0\1\37\20\0\3\u02a2\31\0\1\363\32\0\1\u02a3"+
    "\1\0\1\u02a3\1\0\10\u02a3\1\0\3\u02b6\6\0\22\u02a3"+
    "\3\0\1\u02a3\2\0\3\u02a3\11\0\1\u02b7\5\0\1\u02a3"+
    "\5\0\1\u02a3\2\0\3\u02a3\1\0\2\u02a3\13\0\22\u02a3"+
    "\3\0\1\u02a3\2\0\3\u02a3\17\0\1\u02a3\11\0\1\u02b8"+
    "\75\0\1\37\1\0\1\u02b9\1\0\10\37\12\0\22\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\14\37\1\u02ba\5\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\5\37\1\u02bb\14\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\3\37\1\u02bc\16\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\10\37\1\u02bd\11\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\u02bd\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\5\37\1\u02be\14\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\5\37\1\u02bf\14\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\6\37\1\u02c0\13\37"+
    "\3\0\1\37\2\0\3\37\17\0\1\37\3\0\1\37"+
    "\1\0\1\37\1\0\10\37\12\0\21\37\1\u02c1\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\3\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\22\37\3\0\1\37\2\0"+
    "\1\37\1\u02c2\1\37\17\0\1\37\5\0\1\u02c3\2\0"+
    "\3\u02c3\1\0\2\u02c3\1\0\1\u02c4\3\u02b6\6\0\22\u02c3"+
    "\3\0\1\u02c3\2\0\3\u02c3\17\0\1\u02c3\5\0\1\u02c5"+
    "\2\0\3\u02c5\1\0\2\u02c5\6\0\1\u02b7\4\0\22\u02c5"+
    "\3\0\1\u02c5\2\0\3\u02c5\12\0\1\u02c6\4\0\1\u02c5"+
    "\1\u02b7\35\0\1\u02c7\50\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\6\37\1\u02c8\13\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\6\37\1\u02c9\13\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\22\37\3\0\1\37\2\0\1\37\1\u02ca"+
    "\1\37\17\0\1\37\3\0\1\37\1\0\1\u02cb\1\0"+
    "\10\37\12\0\22\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\0\10\37\12\0"+
    "\20\37\1\u02cc\1\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\3\0\1\u02c3\1\0\1\u02c3\1\0\10\u02c3\1\u02c4"+
    "\3\u02cd\6\0\22\u02c3\3\0\1\u02c3\2\0\3\u02c3\2\0"+
    "\1\u02ce\3\0\1\u02cf\2\0\1\u02d0\5\0\1\u02c3\5\0"+
    "\1\u02c3\2\0\3\u02c3\1\0\2\u02c3\13\0\22\u02c3\3\0"+
    "\1\u02c3\2\0\3\u02c3\17\0\1\u02c3\3\0\1\u02c5\1\0"+
    "\1\u02c5\1\0\10\u02c5\5\0\1\u02b7\4\0\22\u02c5\3\0"+
    "\1\u02c5\2\0\3\u02c5\12\0\1\u02c6\4\0\1\u02c5\1\u02b7"+
    "\17\0\3\u02b6\52\0\1\u02b7\56\0\1\u02d1\36\0\1\37"+
    "\1\0\1\u02d2\1\0\10\37\12\0\22\37\3\0\1\37"+
    "\2\0\3\37\17\0\1\37\3\0\1\37\1\0\1\u02d3"+
    "\1\0\10\37\12\0\22\37\3\0\1\37\2\0\3\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\22\37\3\0\1\37\2\0\1\37\1\u02d4\1\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\22\37\3\0\1\37\2\0\1\37\1\u02d5\1\37"+
    "\17\0\1\37\3\0\1\37\1\0\1\37\1\0\10\37"+
    "\12\0\1\u02d6\21\37\3\0\1\37\2\0\3\37\17\0"+
    "\1\37\20\0\3\u02cd\43\0\1\u02ce\104\0\1\u02d7\21\0"+
    "\1\u02c3\2\0\3\u02c3\1\0\2\u02c3\1\0\1\u02c4\11\0"+
    "\22\u02c3\3\0\1\u02c3\2\0\3\u02c3\17\0\1\u02c3\76\0"+
    "\1\u02d8\42\0\1\u02d9\51\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\22\37\3\0\1\37\2\0\1\37\1\u02da"+
    "\1\37\17\0\1\37\3\0\1\37\1\0\1\37\1\0"+
    "\10\37\12\0\13\37\1\u02db\6\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\20\0\3\u02cd\43\0\1\u02ce\3\0"+
    "\1\u02cf\2\0\1\u02d0\17\0\1\u02dc\75\0\1\37\1\0"+
    "\1\u02dd\1\0\10\37\12\0\22\37\3\0\1\37\2\0"+
    "\3\37\17\0\1\37\50\0\1\u02de\36\0\1\37\1\0"+
    "\1\37\1\0\10\37\12\0\11\37\1\u02df\10\37\3\0"+
    "\1\37\2\0\3\37\17\0\1\37\5\0\1\u02e0\101\0"+
    "\1\37\1\0\1\37\1\0\10\37\12\0\22\37\3\0"+
    "\1\37\1\u02e1\1\0\3\37\17\0\1\37\20\0\3\u02e0"+
    "\5\0\1\u02e2\133\0\1\u02e3\43\0\3\u02e2\1\0\1\u02e4"+
    "\24\0\1\u02e5\32\0\1\u02e6\26\0\1\u02e7\125\0\1\u02e8"+
    "\77\0\1\u02e9\107\0\1\u02ea\77\0\1\u02eb\107\0\1\u02ec"+
    "\77\0\1\u02ed\107\0\1\u02ee\52\0\3\u02ec\31\0\1\u02ef"+
    "\100\0\1\u02f0\56\0\1\u02ec\163\0\1\u02ec\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\15\0\2\1\1\11\11\1\1\11\3\1"+
    "\3\11\25\1\1\11\11\1\4\11\1\1\2\11\1\1"+
    "\2\11\4\1\1\11\4\1\1\11\6\1\1\11\1\1"+
    "\1\11\3\1\1\11\1\1\2\11\2\1\1\11\2\1"+
    "\2\11\1\1\24\11\6\1\2\11\1\1\1\11\1\1"+
    "\1\0\4\1\2\0\1\11\6\1\2\11\2\0\6\1"+
    "\2\0\1\1\3\0\1\11\1\0\1\1\1\11\36\1"+
    "\4\11\1\1\1\11\1\1\12\0\2\1\2\11\1\1"+
    "\1\0\1\11\1\1\1\11\1\1\1\11\1\1\5\11"+
    "\1\1\5\0\3\1\3\11\1\1\3\0\2\1\1\11"+
    "\1\1\3\0\5\1\1\0\1\11\10\0\1\11\1\0"+
    "\1\11\1\1\2\0\1\11\2\0\3\11\2\0\1\1"+
    "\1\0\1\11\16\1\1\0\1\11\43\1\1\11\1\1"+
    "\12\0\7\1\2\11\2\0\1\11\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\2\0\1\11\4\1\1\11"+
    "\5\1\1\11\1\0\1\1\1\0\2\1\1\11\2\0"+
    "\57\1\12\0\10\1\4\0\1\11\3\0\3\1\2\0"+
    "\53\1\5\0\1\11\6\0\11\1\1\11\4\0\1\1"+
    "\1\11\4\1\1\11\1\0\34\1\4\0\1\11\5\0"+
    "\1\11\10\1\4\0\1\1\1\0\25\1\1\11\3\0"+
    "\1\11\1\0\11\1\1\11\3\0\17\1\2\11\7\1"+
    "\4\0\20\1\3\0\12\1\5\0\5\1\5\0\5\1"+
    "\1\11\2\0\2\1\1\0\1\1\1\0\1\1\7\0"+
    "\1\11\7\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[752];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private final List commentList = new ArrayList();
    private String heredoc = null;
    private String nowdoc = null;
    private int nowdoc_len  = 0;
    private String comment = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;
    private int whitespaceEndPosition;
    private boolean isEndedPhp;
    private final PHPDocCommentParser docParser = new PHPDocCommentParser();
    private final PHPVarCommentParser varParser = new PHPVarCommentParser();

    public ASTPHP5Scanner(java.io.Reader in, boolean short_tags_allowed, boolean asp_tags_allowed) {
        this(in);
        this.asp_tags = asp_tags_allowed;
        this.short_tags_allowed = short_tags_allowed;
    }
    //private AST ast;

    private int bracket = 0;

    /**
     * Returns balance beween '{' and '}'. If it's equesl 0,
     * then number of '{' == number of '}', if > 0 then '{' > '}' and
     * if return number < 0 then '{' < '}'
     */
    public int getCurlyBalance() {
        return bracket;
    }

    public int getWhitespaceEndPosition() {
        return whitespaceEndPosition;
    }

    public boolean isEndedPhp() {
        return isEndedPhp;
    }

    public boolean useAspTagsAsPhp() {
        return asp_tags;
    }

    public void reset(java.io.Reader reader) {
        yyreset(reader);
    }

    public void setState(int state) {
        yybegin(state);
    }

    public int getState() {
        return yystate();
    }

    public void setInScriptingState() {
		yybegin(ST_IN_SCRIPTING);
	}

	public void resetCommentList() {
		commentList.clear();
	}

	public List getCommentList() {
		return commentList;
	}

	protected void addComment(Comment.Type type) {
		int leftPosition = getTokenStartPosition();
        //System.out.println("#####AddCommnet start: " + commentStartPosition + " end: " + (leftPosition + getTokenLength()) + ", type: " + type);
        Comment comm;
        if (type == Comment.Type.TYPE_PHPDOC) {
            comm = docParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
        }
        else if(type == Comment.Type.TYPE_VARTYPE) {
            comm = varParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
            if (comm == null) {
                comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
            }
        }
        else {
            comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
        }
		commentList.add(comm);
	}

	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}

    private void pushState(int state) {
        stack.pushStack(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }

    private void handleCommentStart() {
        commentStartPosition = getTokenStartPosition();
    }

    private void handleLineCommentEnd() {
         addComment(Comment.Type.TYPE_SINGLE_LINE);
    }

    private void handleMultilineCommentEnd() {
    	addComment(Comment.Type.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
        addComment(Comment.Type.TYPE_PHPDOC);
    }

    private void handleVarComment() {
    	commentStartPosition = getTokenStartPosition();
    	addComment(Comment.Type.TYPE_VARTYPE);
    }

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }

	private boolean parsePHPDoc(){
		/*final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
		if(documentorLexer == null){
			return false;
		}
		yypushback(zzMarkedPos - zzStartRead);
		int[] parameters = getParamenters();
		documentorLexer.reset(zzReader, zzBuffer, parameters);
		Object phpDocBlock = documentorLexer.parse();
		commentList.add(phpDocBlock);
		reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());*/

                //System.out.println("#######ParsePHPDoc()");
		//return true;
                return false;
	}


	/*protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
		return null;
	}*/

	public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
		this.zzReader = reader;
		this.zzBuffer = buffer;
		this.zzMarkedPos = parameters[0];
		this.zzPushbackPos = parameters[1];
		this.zzCurrentPos = parameters[2];
		this.zzStartRead = parameters[3];
		this.zzEndRead = parameters[4];
		this.yyline = parameters[5];
		this.yychar = this.zzStartRead - this.zzPushbackPos;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ASTPHP5Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ASTPHP5Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1742) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    /*if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }*/
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 185:
          { return createSymbol(ASTPHP5Symbols.T_LINE);
          }
        case 203: break;
        case 152:
          { int removeChars = (yytext().charAt(0) == 'b')?4:3;
    heredoc = yytext().substring(removeChars).trim();    // for 'b<<<' or '<<<'
    if (heredoc.charAt(0) == '"') {
        heredoc = heredoc.substring(1, heredoc.length()-1);
    }
    yybegin(ST_START_HEREDOC);
    return createSymbol(ASTPHP5Symbols.T_START_HEREDOC);
          }
        case 204: break;
        case 27:
          { return createSymbol(ASTPHP5Symbols.T_OR);
          }
        case 205: break;
        case 131:
          { return createSymbol(ASTPHP5Symbols.T_CASE);
          }
        case 206: break;
        case 184:
          { return createSymbol(ASTPHP5Symbols.T_FILE);
          }
        case 207: break;
        case 175:
          { return createSymbol(ASTPHP5Symbols.T_UNSET_CAST);
          }
        case 208: break;
        case 166:
          { return createSymbol(ASTPHP5Symbols.T_EXTENDS);
          }
        case 209: break;
        case 140:
          { return createSymbol(ASTPHP5Symbols.T_TRAIT);
          }
        case 210: break;
        case 36:
          { handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
          }
        case 211: break;
        case 2:
          { return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
          }
        case 212: break;
        case 169:
          { return createSymbol(ASTPHP5Symbols.T_DECLARE);
          }
        case 213: break;
        case 22:
          { return createSymbol(ASTPHP5Symbols.T_RGREATER);
          }
        case 214: break;
        case 124:
          { yypushback(1);
	pushState(ST_VAR_OFFSET);
	return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 215: break;
        case 58:
          { //	yymore();
          }
        case 216: break;
        case 23:
          { return createSymbol(ASTPHP5Symbols.T_TIMES);
          }
        case 217: break;
        case 108:
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?')) {
        yypushback(1);
        yybegin(ST_IN_SHORT_ECHO);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 218: break;
        case 75:
          { return createSymbol(ASTPHP5Symbols.T_MINUS_EQUAL);
          }
        case 219: break;
        case 93:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_OR);
          }
        case 220: break;
        case 13:
          { pushState(ST_IN_SCRIPTING);
    bracket++;
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 221: break;
        case 42:
          { yypushback(1);
	yybegin(ST_HEREDOC);
          }
        case 222: break;
        case 20:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_PARENTHESE);
          }
        case 223: break;
        case 101:
          { String text = yytext();
    int length = text.length() - 1;
    text = text.trim();

    yypushback(1);

    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(heredoc)) {
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
    } else {
    	   yybegin(ST_HEREDOC);
    }
          }
        case 224: break;
        case 143:
          { return createSymbol(ASTPHP5Symbols.T_UNSET);
          }
        case 225: break;
        case 46:
          { yypushback(yylength());
    popState();
          }
        case 226: break;
        case 21:
          { return createSymbol(ASTPHP5Symbols.T_NOT);
          }
        case 227: break;
        case 154:
          { yypushback(3);
	pushState(ST_LOOKING_FOR_PROPERTY);
	return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 228: break;
        case 33:
          { return createSymbol(ASTPHP5Symbols.T_QUESTION_MARK);
          }
        case 229: break;
        case 98:
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 230: break;
        case 86:
          { return createSymbol(ASTPHP5Symbols.T_DIV_EQUAL);
          }
        case 231: break;
        case 198:
          { return createSymbol(ASTPHP5Symbols.T_REQUIRE_ONCE);
          }
        case 232: break;
        case 125:
          { String text = yytext();

    if (text.charAt(text.length() - 2)== ';') {
		text = text.substring(0, text.length() - 2);
        	yypushback(1);
    } else {
		text = text.substring(0, text.length() - 1);
    }

	int textLength = text.length();
	int heredocLength = heredoc.length();
	if (textLength > heredocLength && text.substring(textLength - heredocLength, textLength).equals(heredoc)) {
		yypushback(2);
        	yybegin(ST_END_HEREDOC);
        	// we need to remove the closing label from the symbol value.
                /*<ST_HEREDOC>{HEREDOC_CHARS}*{HEREDOC_NEWLINE}+{LABEL}";"?[\n\r]*/
        	Symbol sym = createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
        	String value = (String)sym.value;
        	sym.value = value.substring(0, value.length() - heredocLength + 1);
	   	return sym;
	}
	yypushback(1);
          }
        case 233: break;
        case 47:
          { popState();
    return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 234: break;
        case 130:
          { return createSymbol(ASTPHP5Symbols.T_EVAL);
          }
        case 235: break;
        case 73:
          { return createSymbol(ASTPHP5Symbols.T_DO);
          }
        case 236: break;
        case 74:
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_OR);
          }
        case 237: break;
        case 82:
          { return createSymbol(ASTPHP5Symbols.T_IS_SMALLER_OR_EQUAL);
          }
        case 238: break;
        case 69:
          { return createFullSymbol(ASTPHP5Symbols.T_CONSTANT_ENCAPSED_STRING);
          }
        case 239: break;
        case 163:
          { return createSymbol(ASTPHP5Symbols.T_PUBLIC);
          }
        case 240: break;
        case 111:
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_AND);
          }
        case 241: break;
        case 102:
          { String text = yytext();
    int length = text.length() - 1;
    text = text.trim();

    yypushback(1);

    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(nowdoc)) {
        nowdoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
    } else {
        yybegin(ST_NOWDOC);
    }
          }
        case 242: break;
        case 114:
          { return createFullSymbol(ASTPHP5Symbols.T_EXIT);
          }
        case 243: break;
        case 39:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 244: break;
        case 138:
          { return createSymbol(ASTPHP5Symbols.T_BREAK);
          }
        case 245: break;
        case 120:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_IDENTICAL);
          }
        case 246: break;
        case 45:
          { nowdoc=null;
    nowdoc_len=0;
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
          }
        case 247: break;
        case 145:
          { return createSymbol(ASTPHP5Symbols.T_CONST);
          }
        case 248: break;
        case 133:
          { return createSymbol(ASTPHP5Symbols.T_GOTO);
          }
        case 249: break;
        case 170:
          { return createSymbol(ASTPHP5Symbols.T_FINALLY);
          }
        case 250: break;
        case 158:
          { /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ASTPHP5Symbols.T_DEFINE);
          }
        case 251: break;
        case 59:
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			handleLineCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
          }
        case 252: break;
        case 92:
          { return createSymbol(ASTPHP5Symbols.T_OR_EQUAL);
          }
        case 253: break;
        case 202:
          { yybegin(ST_HALTED_COMPILER);
	return createSymbol(ASTPHP5Symbols.T_HALT_COMPILER);
          }
        case 254: break;
        case 60:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 255: break;
        case 172:
          { return createSymbol(ASTPHP5Symbols.T_REQUIRE);
          }
        case 256: break;
        case 55:
          { popState();
	return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 257: break;
        case 32:
          { return createSymbol(ASTPHP5Symbols.T_TILDA);
          }
        case 258: break;
        case 18:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDOTAIM);
          }
        case 259: break;
        case 26:
          { return createSymbol(ASTPHP5Symbols.T_REFERENCE);
          }
        case 260: break;
        case 87:
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 261: break;
        case 43:
          { heredoc = null;
	yybegin(ST_IN_SCRIPTING);
	return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
          }
        case 262: break;
        case 197:
          { return createSymbol(ASTPHP5Symbols.T_INCLUDE_ONCE);
          }
        case 263: break;
        case 16:
          { return createSymbol(ASTPHP5Symbols.T_MINUS);
          }
        case 264: break;
        case 80:
          { pushState(ST_LOOKING_FOR_CLASS_CONST);
	return createSymbol(ASTPHP5Symbols.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 265: break;
        case 115:
          { return createSymbol(ASTPHP5Symbols.T_FOR);
          }
        case 266: break;
        case 148:
          { return createSymbol(ASTPHP5Symbols.T_YIELD);
          }
        case 267: break;
        case 106:
          { handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
          }
        case 268: break;
        case 151:
          { return createSymbol(ASTPHP5Symbols.T_INT_CAST);
          }
        case 269: break;
        case 117:
          { return createSymbol(ASTPHP5Symbols.T_NEW);
          }
        case 270: break;
        case 76:
          { return createSymbol(ASTPHP5Symbols.T_DEC);
          }
        case 271: break;
        case 96:
          { yypushback(1);
    /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[\"]))*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 272: break;
        case 189:
          { return createSymbol(ASTPHP5Symbols.T_NAMESPACE);
          }
        case 273: break;
        case 193:
          { return createSymbol(ASTPHP5Symbols.T_ENDFOREACH);
          }
        case 274: break;
        case 77:
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 275: break;
        case 137:
          { return createSymbol(ASTPHP5Symbols.T_ARRAY);
          }
        case 276: break;
        case 14:
          { return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
          }
        case 277: break;
        case 201:
          { return createSymbol(ASTPHP5Symbols.T_NS_C);
          }
        case 278: break;
        case 3:
          { // do nothing
          }
        case 279: break;
        case 49:
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ASTPHP5Symbols.T_STRING_VARNAME);
          }
        case 280: break;
        case 180:
          { return createSymbol(ASTPHP5Symbols.T_FUNCTION);
          }
        case 281: break;
        case 17:
          { return createSymbol(ASTPHP5Symbols.T_LGREATER);
          }
        case 282: break;
        case 191:
          { return createSymbol(ASTPHP5Symbols.T_CLASS_C);
          }
        case 283: break;
        case 105:
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 284: break;
        case 4:
          { return createFullSymbol(ASTPHP5Symbols.T_LNUMBER);
          }
        case 285: break;
        case 181:
          { return createSymbol(ASTPHP5Symbols.T_CONTINUE);
          }
        case 286: break;
        case 149:
          { return createSymbol(ASTPHP5Symbols.T_WHILE);
          }
        case 287: break;
        case 99:
          { yypushback(1);
        /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[`]))*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 288: break;
        case 129:
          { return createSymbol(ASTPHP5Symbols.T_ELSE);
          }
        case 289: break;
        case 37:
          { yypushback(yylength());
        popState();
          }
        case 290: break;
        case 134:
          { handleCommentStart();
          }
        case 291: break;
        case 132:
          { return createSymbol(ASTPHP5Symbols.T_LIST);
          }
        case 292: break;
        case 50:
          { return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 293: break;
        case 90:
          { return createSymbol(ASTPHP5Symbols.T_AND_EQUAL);
          }
        case 294: break;
        case 67:
          { return createSymbol(ASTPHP5Symbols.T_AS);
          }
        case 295: break;
        case 188:
          { return createSymbol(ASTPHP5Symbols.T_INSTEADOF);
          }
        case 296: break;
        case 186:
          { return createSymbol(ASTPHP5Symbols.T_ENDSWITCH);
          }
        case 297: break;
        case 54:
          { bracket++; return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 298: break;
        case 113:
          { return createSymbol(ASTPHP5Symbols.T_TRY);
          }
        case 299: break;
        case 61:
          { if (asp_tags) {
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 300: break;
        case 153:
          { popState();
        return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 301: break;
        case 178:
          { return createSymbol(ASTPHP5Symbols.T_ENDWHILE);
          }
        case 302: break;
        case 128:
          { return createSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 303: break;
        case 174:
          { return createSymbol(ASTPHP5Symbols.T_ARRAY_CAST);
          }
        case 304: break;
        case 141:
          { return createSymbol(ASTPHP5Symbols.T_THROW);
          }
        case 305: break;
        case 165:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_CAST);
          }
        case 306: break;
        case 12:
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 307: break;
        case 30:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_RECT);
          }
        case 308: break;
        case 162:
          { return createSymbol(ASTPHP5Symbols.T_GLOBAL);
          }
        case 309: break;
        case 97:
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ASTPHP5Symbols.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 310: break;
        case 144:
          { return createSymbol(ASTPHP5Symbols.T_CATCH);
          }
        case 311: break;
        case 35:
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    bracket--;
    return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 312: break;
        case 88:
          { return createSymbol(ASTPHP5Symbols.T_MOD_EQUAL);
          }
        case 313: break;
        case 24:
          { return createSymbol(ASTPHP5Symbols.T_DIV);
          }
        case 314: break;
        case 199:
          { return createSymbol(ASTPHP5Symbols.T_FUNC_C);
          }
        case 315: break;
        case 168:
          { return createSymbol(ASTPHP5Symbols.T_DEFAULT);
          }
        case 316: break;
        case 31:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 317: break;
        case 7:
          { return createSymbol(ASTPHP5Symbols.T_PLUS);
          }
        case 318: break;
        case 159:
          { return createSymbol(ASTPHP5Symbols.T_STATIC);
          }
        case 319: break;
        case 116:
          { return createSymbol(ASTPHP5Symbols.T_USE);
          }
        case 320: break;
        case 176:
          { return createSymbol(ASTPHP5Symbols.T_DIR);
          }
        case 321: break;
        case 161:
          { return createSymbol(ASTPHP5Symbols.T_RETURN);
          }
        case 322: break;
        case 78:
          { return createSymbol(ASTPHP5Symbols.T_IS_GREATER_OR_EQUAL);
          }
        case 323: break;
        case 146:
          { return createSymbol(ASTPHP5Symbols.T_CLASS);
          }
        case 324: break;
        case 40:
          { /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}+*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 325: break;
        case 38:
          { /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}+*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 326: break;
        case 195:
          { return createSymbol(ASTPHP5Symbols.T_IMPLEMENTS);
          }
        case 327: break;
        case 139:
          { return createSymbol(ASTPHP5Symbols.T_ISSET);
          }
        case 328: break;
        case 91:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_AND);
          }
        case 329: break;
        case 6:
          { return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 330: break;
        case 5:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDA);
          }
        case 331: break;
        case 56:
          { bracket--; return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 332: break;
        case 177:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        nowdoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            nowdoc_len--;
        }
        // first quate
        startString++;
        nowdoc = yytext().substring(startString,nowdoc_len+startString);
        yybegin(ST_START_NOWDOC);
        return createSymbol(ASTPHP5Symbols.T_START_NOWDOC);
          }
        case 333: break;
        case 48:
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 334: break;
        case 155:
          { isEndedPhp = false;
    whitespaceEndPosition = getTokenStartPosition() + yylength();
    yybegin(ST_IN_SCRIPTING);
    //return T_OPEN_TAG;
    //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
          }
        case 335: break;
        case 66:
          { return createSymbol(ASTPHP5Symbols.T_PLUS_EQUAL);
          }
        case 336: break;
        case 9:
          { whitespaceEndPosition = getTokenStartPosition() + yylength();
          }
        case 337: break;
        case 135:
          { return createSymbol(ASTPHP5Symbols.T_ENDIF);
          }
        case 338: break;
        case 19:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_PARENTHESE);
          }
        case 339: break;
        case 192:
          { return createSymbol(ASTPHP5Symbols.T_ENDDECLARE);
          }
        case 340: break;
        case 118:
          { return createSymbol(ASTPHP5Symbols.T_SR_EQUAL);
          }
        case 341: break;
        case 62:
          { if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 342: break;
        case 142:
          { return createSymbol(ASTPHP5Symbols.T_FINAL);
          }
        case 343: break;
        case 167:
          { return createSymbol(ASTPHP5Symbols.T_INCLUDE);
          }
        case 344: break;
        case 147:
          { return createSymbol(ASTPHP5Symbols.T_CLONE);
          }
        case 345: break;
        case 81:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_EQUAL);
          }
        case 346: break;
        case 173:
          { return createSymbol(ASTPHP5Symbols.T_PRIVATE);
          }
        case 347: break;
        case 84:
          { return createSymbol(ASTPHP5Symbols.T_MUL_EQUAL);
          }
        case 348: break;
        case 123:
          { if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
          }
        case 349: break;
        case 171:
          { return createSymbol(ASTPHP5Symbols.T_FOREACH);
          }
        case 350: break;
        case 121:
          { return createSymbol(ASTPHP5Symbols.T_SL_EQUAL);
          }
        case 351: break;
        case 136:
          { return createSymbol(ASTPHP5Symbols.T_EMPTY);
          }
        case 352: break;
        case 127:
          { int len = yylength();
        yypushback(2); // go back to mark end of comment in the next token
        comment = yytext();
          }
        case 353: break;
        case 183:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_CAST);
          }
        case 354: break;
        case 100:
          { yypushback(1);
    /*<ST_HEREDOC>{HEREDOC_CHARS}*({HEREDOC_NEWLINE}+({LABEL}";"?)?)?("{""{"+|"$""$"+)*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 355: break;
        case 160:
          { return createSymbol(ASTPHP5Symbols.T_SWITCH);
          }
        case 356: break;
        case 164:
          { return createSymbol(ASTPHP5Symbols.T_BOOL_CAST);
          }
        case 357: break;
        case 41:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 358: break;
        case 8:
          { return createSymbol(ASTPHP5Symbols.T_NS_SEPARATOR);
          }
        case 359: break;
        case 182:
          { return createSymbol(ASTPHP5Symbols.T_STRING_CAST);
          }
        case 360: break;
        case 51:
          { yypushback(1);
	popState();
        /*<ST_VAR_OFFSET>[ \n\r\t\\'#]*/
	return createSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 361: break;
        case 63:
          { return createFullSymbol(ASTPHP5Symbols.T_DNUMBER);
          }
        case 362: break;
        case 119:
          { return createSymbol(ASTPHP5Symbols.T_VAR);
          }
        case 363: break;
        case 110:
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_XOR);
          }
        case 364: break;
        case 25:
          { return createSymbol(ASTPHP5Symbols.T_PRECENT);
          }
        case 365: break;
        case 200:
          { comment = yytext();
    handleVarComment();
    // if we want to handle the var comment in  ast, then return the T_VAR_Comment symbol
    // but it needs some changes in parser grammar. see issue #154967
    //return createFullSymbol(ASTPHP5Symbols.T_VAR_COMMENT);
          }
        case 366: break;
        case 95:
          { isEndedPhp = true;
    yybegin(YYINITIAL);
    return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 367: break;
        case 89:
          { if (asp_tags) {
        yybegin(YYINITIAL);
        return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 368: break;
        case 72:
          { return createSymbol(ASTPHP5Symbols.T_IF);
          }
        case 369: break;
        case 28:
          { return createSymbol(ASTPHP5Symbols.T_KOVA);
          }
        case 370: break;
        case 196:
          { return createSymbol(ASTPHP5Symbols.T_METHOD_C);
          }
        case 371: break;
        case 11:
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 372: break;
        case 1:
          { /*<ST_HEREDOC>{HEREDOC_CHARS}*({HEREDOC_NEWLINE}+({LABEL}";"?)?)?*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 373: break;
        case 112:
          { return createSymbol(ASTPHP5Symbols.T_IS_IDENTICAL);
          }
        case 374: break;
        case 71:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_ARROW);
          }
        case 375: break;
        case 79:
          { return createSymbol(ASTPHP5Symbols.T_SR);
          }
        case 376: break;
        case 15:
          { return createSymbol(ASTPHP5Symbols.T_EQUAL);
          }
        case 377: break;
        case 29:
          { return createSymbol(ASTPHP5Symbols.T_COMMA);
          }
        case 378: break;
        case 194:
          { return createSymbol(ASTPHP5Symbols.T_INSTANCEOF);
          }
        case 379: break;
        case 107:
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
        isEndedPhp = true;
	    handleLineCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	}
          }
        case 380: break;
        case 64:
          { return createSymbol(ASTPHP5Symbols.T_CONCAT_EQUAL);
          }
        case 381: break;
        case 104:
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 382: break;
        case 10:
          { return createSymbol(ASTPHP5Symbols.T_DOLLAR);
          }
        case 383: break;
        case 65:
          { return createSymbol(ASTPHP5Symbols.T_INC);
          }
        case 384: break;
        case 44:
          { yypushback(1);
	yybegin(ST_NOWDOC);
          }
        case 385: break;
        case 156:
          { return createSymbol(ASTPHP5Symbols.T_ENDFOR);
          }
        case 386: break;
        case 83:
          { return createSymbol(ASTPHP5Symbols.T_SL);
          }
        case 387: break;
        case 126:
          { String text = yytext();

    if (text.charAt(text.length() - 2)== ';') {
        text = text.substring(0, text.length() - 2);
        yypushback(1);
    } else {
        text = text.substring(0, text.length() - 1);
    }

    int textLength = text.length();
    int nowdocLength = nowdoc.length();
    if (textLength > nowdocLength && text.substring(textLength - nowdocLength, textLength).equals(nowdoc)) {
        yypushback(2);
        yybegin(ST_END_NOWDOC);
        Symbol sym = createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
        String value = (String)sym.value;
        sym.value = value.substring(0, value.length() - nowdocLength + 1);
        return sym;
    }
    yypushback(1);
          }
        case 388: break;
        case 122:
          { return createSymbol(ASTPHP5Symbols.T_POW_EQUAL);
          }
        case 389: break;
        case 157:
          { return createSymbol(ASTPHP5Symbols.T_ELSEIF);
          }
        case 390: break;
        case 70:
          { return createSymbol(ASTPHP5Symbols.T_IS_EQUAL);
          }
        case 391: break;
        case 34:
          { return createSymbol(ASTPHP5Symbols.T_AT);
          }
        case 392: break;
        case 52:
          { return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 393: break;
        case 68:
          { return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 394: break;
        case 179:
          { return createSymbol(ASTPHP5Symbols.T_ABSTRACT);
          }
        case 395: break;
        case 190:
          { return createSymbol(ASTPHP5Symbols.T_PROTECTED);
          }
        case 396: break;
        case 94:
          { return createSymbol(ASTPHP5Symbols.T_XOR_EQUAL);
          }
        case 397: break;
        case 85:
          { return createSymbol(ASTPHP5Symbols.T_POW);
          }
        case 398: break;
        case 150:
          { return createSymbol(ASTPHP5Symbols.T_PRINT);
          }
        case 399: break;
        case 103:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 400: break;
        case 187:
          { return createSymbol(ASTPHP5Symbols.T_INTERFACE);
          }
        case 401: break;
        case 109:
          { return createSymbol(ASTPHP5Symbols.T_ELLIPSIS);
          }
        case 402: break;
        case 53:
          { return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 403: break;
        case 57:
          {
          }
        case 404: break;
        default:
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case ST_DOCBLOCK: {
              if (yytext().length() > 0) {
                yypushback(1);  // backup eof
                comment = yytext();
              }
              else {
                return createSymbol(ASTPHP5Symbols.EOF);
              }
            }
            case 753: break;
            default:
              {     return createSymbol(ASTPHP5Symbols.EOF);
 }
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
