# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 2013 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# https://java.net/projects/gf-tooling/pages/License or LICENSE.TXT.
# See the License for the specific language governing permissions
# and limitations under the License.  When distributing the software,
# include this License Header Notice in each file and include the License
# file at LICENSE.TXT. Oracle designates this particular file as subject
# to the "Classpath" exception as provided by Oracle in the GPL Version 2
# section of the License file that accompanied this code. If applicable,
# add the following below the License Header, with the fields enclosed
# by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
# 
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
# 
# Contributor(s):
# 
# Portions Copyrighted 2008 Sun Microsystems, Inc.

################################################################################
# Log messages                                                                 #
# Use <class>.<method>.<name> notation for keys.                               #
################################################################################

# AdminPortTask class
AdminPortTask.closeSocket.failed=Socket closing failed when connecting \
to {0}:{1}: {2}
AdminPortTask.closeSocket.failedTm=[{0}] Socket closing failed when connecting \
to {1}:{2}: {3}
# AdminPortTask class
AdminPortTask.run.cancelled=Running already canceled administrator port check \
task.
AdminPortTask.run.started=Administrator port check task for server {0} \
in state {1} started.
AdminPortTask.run.connect=Port check could not connect to {0}:{1}: {2}
AdminPortTask.run.connectTm=[{0}] Port check could not connect to {1}:{2}: {3}
AdminPortTask.run.timeout=Port check timeout when connecting to {0}:{1}: {2}
AdminPortTask.run.timeoutTm=[{0}] Port check timeout when connecting \
to {1}:{2}: {3}
AdminPortTask.run.ioException=Port check caught IO exception when connecting \
to {0}:{1}: {2}
AdminPortTask.run.ioExceptionTm=[{0}] Port check caught IO exception when \
connecting to {1}:{2}: {3}
AdminPortTask.run.success=[{0}] Port status check for state {1} succeeded \
on {2}:{3}

# StatusJob class
StatusJob.portCheckTransition.transition=Port check transition {0}: {1} -> {2}
StatusJob.commandLocationsTransition.transition=Command check transition \
{0}: {1} -> {2}
StatusJob.commandVersionTransition.transition=Version check transition \
{0}: {1} -> {2}

# StatusJob.ListenerLocations class
ListenerLocations.operationStateChanged.result=Status check locations command \
result: {0}

# StatusJob.ListenerVersion class
ListenerVersion.operationStateChanged.result=Status check version command \
result: {0}

# StatusJob.ListenerPortCheck class
ListenerPortCheck.operationStateChanged.result=Status administrator port check \
result: {0}

# RunnerTask class
RunnerTask.run.cancelled=Running already canceled asadmin command check task.
RunnerTask.run.started=Asadmin command task for server {0} in state {1} started.
