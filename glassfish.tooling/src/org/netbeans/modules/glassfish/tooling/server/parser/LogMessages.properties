# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 2013 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# https://java.net/projects/gf-tooling/pages/License or LICENSE.TXT.
# See the License for the specific language governing permissions
# and limitations under the License.  When distributing the software,
# include this License Header Notice in each file and include the License
# file at LICENSE.TXT. Oracle designates this particular file as subject
# to the "Classpath" exception as provided by Oracle in the GPL Version 2
# section of the License file that accompanied this code. If applicable,
# add the following below the License Header, with the fields enclosed
# by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
# 
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
# 
# Contributor(s):
# 
# Portions Copyrighted 2008 Sun Microsystems, Inc.

################################################################################
# Log messages                                                                 #
# Use <class>.<method>.<name> notation for keys.                               #
################################################################################

# HttpListenerReader class
HttpListenerReader.readAttributes.port=HTTP listener port {0} enabled {1} \
secure-enabled {2}.
HttpListenerReader.readAttributes.add=Adding {0}.
HttpListenerReader.readAttributes.noName=HTTP listener found with no name.
HttpListenerReader.readAttributes.numberFormat=Error reading HTTP listener: 

# JmxConnectorReader class
JmxConnectorReader.getServerConfig.port=JMX port {0}
JmxConnectorReader.getServerConfig.error=Error reading JMX port: 

# NetworkListenerReader class
NetworkListenerReader.readAttributes.port=Network listener port {0} \
enabled {1} secure-enabled {2}.
NetworkListenerReader.readAttributes.add=Adding {0}.
NetworkListenerReader.readAttributes.noName=Network listener found with no name.
NetworkListenerReader.readAttributes..numberFormat=Error reading network \
listener: 

# TreeParser class
TreeParser.readXml.cantClose=Cannot close XML file input stream: 
TreeParser.startElement.skipReading=Skip reading {0}.
TreeParser.startElement.skipDescend=Skip descend, depth is {0}, qn is {1}.
TreeParser.startElement.roverDescend=Rover descend to {0}.
TreeParser.startElement.roverEnter=Rover enter and read node {0}.
TreeParser.startElement.skipStart=Skip start, depth is {0}, qn is {1}.
TreeParser.endElement.doesNotMatch=Skip {0} does not match {1} at depth {2}.
TreeParser.endElement.skipAscend=Skip ascend, depth is {0}.
TreeParser.endElement.roverEnter=Rover exit and read node {0}.
TreeParser.endElement.roverAscend=Rover ascend to {0}.
TreeParser.buildTree.invalidNoParts=Invalid entry, no parts, skipping {0}.
TreeParser.buildTree.invalidNullRoot=Invalid entry, null root, skipping {0}.
TreeParser.buildTree.createdRootNode=Created root node {0}.
TreeParser.buildTree.existing=Existing node {0} at level {1}.
TreeParser.buildTree.add=Adding node {0} at level {1}.
TreeParser.buildTree.broken=Broken parts found in {0} at level {1}.
