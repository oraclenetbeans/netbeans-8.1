<?xml version="1.0" encoding="UTF-8"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.

Oracle and Java are registered trademarks of Oracle and/or its affiliates.
Other names may be trademarks of their respective owners.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
particular file as subject to the "Classpath" exception as provided
by Oracle in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->
<!DOCTYPE apichanges PUBLIC "-//NetBeans//DTD API changes list 1.0//EN" "../nbbuild/javadoctools/apichanges.dtd">
<apichanges>
    <apidefs>
        <apidef name="JavaRefactoringAPI">Java Refactoring API</apidef>
    </apidefs>
    <changes>
        <change id="FilterDependency">
            <api name="JavaRefactoringAPI"/>
            <summary>Added BINARYFILE, DEPENDENCY, PLATFORM constants to JavaWhereUsedFilters.</summary>
            <version major="1" minor="55"/>
            <date day="27" month="6" year="2015"/>
            <author login="ralphbenjamin"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    To support filtering of results from dependencies, the constants
                    BINARYFILE, DEPENDENCY and PLATFORM are added to the enum
                    JavaWhereUsedFilters.
                </p>    
            </description>
            <class package="org.netbeans.modules.refactoring.java.spi" name="JavaWhereUsedFilters"/>
            <issue number="252994"/>
        </change>
        <change id="FilterSourcePackages">
            <api name="JavaRefactoringAPI"/>
            <summary>Added SOURCEFILE constant to JavaWhereUsedFilters.</summary>
            <version major="1" minor="54"/>
            <date day="16" month="12" year="2014"/>
            <author login="ralphbenjamin"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    To support filtering the opposite of test sources, the constant
                    SOURCEFILE is added to the enum JavaWhereUsedFilters.
                </p>    
            </description>
            <class package="org.netbeans.modules.refactoring.java.spi" name="JavaWhereUsedFilters"/>
            <issue number="248250"/>
        </change>
        <change id="DocTrees">
            <api name="JavaRefactoringAPI"/>
            <summary>RefactoringVisitor has support for visiting DocTrees</summary>
            <version major="1" minor="45"/>
            <date day="2" month="5" year="2013"/>
            <author login="ralphbenjamin"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    The RefactoringVisitor now implements DocTreeVisitor&lt;DocTree, Element&gt;.
                </p>    
            </description>
            <class package="org.netbeans.modules.refactoring.java.spi" name="RefactoringVisitor"/>
            <issue number="999999"/>
        </change>
        <change id="JavaWhereUsedSearchOverloaded">
            <api name="JavaRefactoringAPI"/>
            <summary>Added new constant to WhereUsedQueryConstants to search for usages of overloaded methods.</summary>
            <version major="1" minor="45"/>
            <date day="27" month="2" year="2013"/>
            <author login="ralphbenjamin"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    Added new constant to WhereUsedQueryConstants to search for usages of overloaded methods.
                </p>    
            </description>
            <class package="org.netbeans.modules.refactoring.java.api" name="WhereUsedQueryConstants"/>
            <issue number="216534"/>
        </change>
        <change id="JavaWhereUsedFilters">
            <api name="JavaRefactoringAPI"/>
            <summary>Added refactoring filter keys for find usages results.</summary>
            <version major="1" minor="39"/>
            <date day="8" month="8" year="2012"/>
            <author login="ralphbenjamin"/>
            <compatibility addition="yes"/>
            <description>
                <p>Added an enumeration with keys to identify different filters used by Java Refactoring's Find Usages.</p>
                <ul>
                    <li>IMPORT("filter-import")</li>
                    <li>COMMENT("filter-comment")</li>
                    <li>TESTFILE("filter-testfile")</li>
                    <li>READ("filter-read")</li>
                    <li>WRITE("filter-write")</li>
                    <li>READ_WRITE("filter-readwrite")</li>
                </ul>
            </description>
            <class package="org.netbeans.modules.refactoring.java.spi"
                   name="JavaWhereUsedFilters"/>
            <issue number="215361"/>
        </change>
        <change id="ReplaceConstructorWithBuilder-ReplaceConstructorWithFactory-InvertBoolean">
            <api name="JavaRefactoringAPI"/>
            <summary>New refactorings on board: ReplaceConstructorWithFactory,
                ReplaceConstructorWithBuilder and InvertBoolean
            </summary>
            <version major="1" minor="36"/>
            <date day="29" month="3" year="2012"/>
            <author login="jbecicka"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    New refactorings on board:
                    ReplaceConstructorWithFactoryRefactoring,
                    ReplaceConstructorWithBuilderRefactoring and InvertBooleanRefactoring.
                </p>    
            </description>
            <class package="org.netbeans.modules.refactoring.java.api"
                   name="ReplaceConstructorWithFactoryRefactoring"/>
            <class package="org.netbeans.modules.refactoring.java.api"
                   name="ReplaceConstructorWithBuilderRefactoring"/>
            <class package="org.netbeans.modules.refactoring.java.api"
                   name="InvertBooleanRefactoring"/>
            <issue number="208240"/>
        </change>
        
        <change id="IntroduceLocalExtension">
            <api name="JavaRefactoringAPI"/>
            <summary>Added support for Introduce Local Extension Refactoring.</summary>
            <version major="1" minor="34"/>
            <date day="8" month="2" year="2012"/>
            <author login="ralphbenjamin"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    Added support for Introduce Local Extension Refactoring.
                </p>    
            </description>
            <class package="org.netbeans.modules.refactoring.java.api" name="IntroduceLocalExtensionRefactoring"/>
            <class package="org.netbeans.modules.refactoring.java.spi.ui" name="JavaActionsImplementationProvider"/>
            <issue number="208164"/>
        </change>
        <change id="EncapsulateFieldRefactoring-PropertyChangeSupport">
            <api name="JavaRefactoringAPI"/>
            <summary>Added option to generate PropertyChangeSupport in EncapsulateFieldRefactoring.</summary>
            <version major="1" minor="32"/>
            <date day="8" month="12" year="2011"/>
            <author login="jbecicka"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    Added option to generate PropertyChangeSupport in EncapsulateFieldRefactoring.
                </p>    
            </description>
            <class package="org.netbeans.modules.refactoring.java.api" name="EncapsulateFieldRefactoring"/>
            <issue number="205996"/>
        </change>
        <change id="JavaMoveMembersProperties">
            <api name="JavaRefactoringAPI"/>
            <summary>Added new Move Members Properties.</summary>
            <version major="1" minor="31"/>
            <date day="7" month="12" year="2011"/>
            <author login="ralphbenjamin"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    Add an api for the Java Move Members Properties.
                </p>    
            </description>
            <class package="org.netbeans.modules.refactoring.java.api" name="JavaMoveMembersProperties"/>
            <issue number="205696"/>
        </change>
        <change id="IntroduceParameterRefactoring">
            <api name="JavaRefactoringAPI"/>
            <summary>Added new refactoring and dependent change in ChangeParameterRefactoring.</summary>
            <version major="1" minor="28"/>
            <date day="29" month="8" year="2011"/>
            <author login="ralphbenjamin"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    Add an api for the introduce parameter refactoring. Also changed
                    the Change Paramters refactoring to support the creation of
                    compatible overloaded methods.
                </p>    
            </description>
            <class package="org.netbeans.modules.refactoring.java.api" name="IntroduceParameterRefactoring"/>
            <class package="org.netbeans.modules.refactoring.java.api" name="ChangeParametersRefactoring"/>
            <issue number="201399"/>
        </change>
        <change id="JavaScopeBuilder">
            <api name="JavaRefactoringAPI"/>
            <summary>UI support for creating a new Scope.</summary>
            <version major="1" minor="27"/>
            <date day="17" month="8" year="2011"/>
            <author login="ralphbenjamin"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    UI support for creating a new Scope. Opens a dialog to select
                    different parts of open projects to include in the new scope.
                </p>    
            </description>
            <class package="org.netbeans.modules.refactoring.java.api.ui" name="JavaScopeBuilder"/>
            <issue number="200572"/>
        </change>
        <change id="ChangeParameters">
            <api name="JavaRefactoringAPI"/>
            <summary>Method name and return type added, to allow them to be changed from the refactoring.</summary>
            <version major="1" minor="18"/>
            <date day="19" month="7" year="2011"/>
            <author login="ralphbenjamin"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    The Change Method Parameters refactoring should be changed to
                    allow changing the method signature. The api needs to store the
                    new name for the method, if the method needs to be renamed, and
                    it needs to store the new return type, if the return type needs
                    to be changed.
                </p>    
            </description>
            <class package="org.netbeans.modules.refactoring.java.api" name="ChangeParametersRefactoring"/>
            <issue number="200232"/>
        </change>
    </changes>
    <htmlcontents>
        <head>
            <title>Change History for the Java Refactoring API</title>
            <link rel="stylesheet" href="prose.css" type="text/css"/>
        </head>
        <body>
            <p class="overviewlink">
                <a href="overview-summary.html">Overview</a>
            </p>
            <h1>Introduction</h1>
            <p>This document lists changes made to the Java Refactoring API.</p>
            
            <!-- The actual lists of changes, as summaries and details: -->
            <hr/>
            <standard-changelists module-code-name="$codebase"/>
            
            <hr/>
            <p>@FOOTER@</p>
        </body>
    </htmlcontents>
</apichanges>
