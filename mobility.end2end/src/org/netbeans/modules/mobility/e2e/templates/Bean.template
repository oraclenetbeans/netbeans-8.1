/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 */

/*
 *
 */
<#if bean.getPackage() != "" >
package ${bean.getPackage()};
</#if>

<#assign databinding = mapping.getProperty( "databinding" ) == "true"/>

<#if databinding>
import org.netbeans.microedition.databinding.DataSet;
import org.netbeans.microedition.databinding.DataBindingException;

</#if>
/**
 * 
 */
<#if bean.getParent().getFullyQualifiedName() == "java.lang.Object">
public class ${bean.getClassName()}<#if databinding> implements DataSet</#if> {
<#else>
public class ${bean.getClassName()} extends ${bean.getParent().getFullyQualifiedName()}<#if databinding> implements DataSet</#if> {
</#if>
    <#list bean.getFields() as field>

    <#assign propertyType = field.getType().getSerializer().instanceOf( mapping, field.getType())>
    <#if createStubs || field.getModifier() == "PUBLIC">
        public ${propertyType} ${field.getName()};
    <#else>
        private ${propertyType} ${field.getName()};

        public void ${field.getSetter()}(${propertyType} ${field.getName()})  {
            this.${field.getName()} = ${field.getName()};
        }

        public ${propertyType} ${field.getGetter()}() {
            return ${field.getName()};
        }
    </#if>
    </#list>
    <#if databinding>
    public Class getType(String dataItemName) throws DataBindingException {
        <#list bean.getFields() as field>
        <#assign propertyType = field.getType().getSerializer().instanceOf( mapping, field.getType())>
        if( "${field.getName()}".equals(dataItemName)) {
            <#assign fieldType = field.getType()/>
            <#if fieldType.isPrimitive() && !fieldType.isArray()>
                <#if propertyType == "int">
                    return Integer.class;
                <#elseif propertyType == "boolean">
                    return Boolean.class;
                <#elseif propertyType == "long">
                    return Long.class;
                <#elseif propertyType == "short">
                    return Short.class;
                <#elseif propertyType == "byte">
                    return Byte.class;
                <#elseif propertyType == "char">
                    return Character.class;
                <#elseif propertyType == "float">
                    return Float.class;
                <#elseif propertyType == "double">
                    return Double.class;
                </#if>
            <#else>
                return ${propertyType}.class;
            </#if>
        }
        </#list>
        throw new IllegalArgumentException( "Invalid data item name " + dataItemName );
    }

    public Object getValue(String dataItemName) throws DataBindingException {
        <#list bean.getFields() as field>
        if( "${field.getName()}".equals( dataItemName )) {
        <#if field.getType().isPrimitive()>
            return ${field.getType().getSerializer().toObject( mapping, field.getType(), field.getName())};
        <#else>
            return ${field.getName()};
        </#if>
        }
        </#list>
        throw new IllegalArgumentException( "Invalid data item name " + dataItemName );
    }

    public void setValue(String dataItemName, Object value) throws DataBindingException {
        <#list bean.getFields() as field>
        if( "${field.getName()}".equals( dataItemName )) {
            ${field.getName()} = ${field.getType().getSerializer().fromObject( mapping, field.getType(), "value" )};
        }
        </#list>
        throw new IllegalArgumentException( "Invalid data item name " + dataItemName );
    }

    public void setAsString(String dataItemName, String value) throws DataBindingException {
        <#list bean.getFields() as field>
        if( "${field.getName()}".equals( dataItemName )) {
        <#assign parsedType = utils.parsePrimitiveType( field.getType().getSerializer().instanceOf( mapping, field.getType()), "value" )/>
        <#if parsedType != "">
            ${field.getName()} = ${parsedType};
            return;
        <#else>
            throw new DataBindingException( "Unsupported conversion from String" );
        </#if>
        }
        </#list>

        throw new IllegalArgumentException( "Invalid data item name " + dataItemName );
    }

    public boolean isReadOnly(String arg0) throws DataBindingException {
        return false;
    }
    </#if>
}
