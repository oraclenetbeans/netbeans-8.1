//GEN-BEGIN:Client
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 */

/**
 * This file is generated. Please do not change
 */
<#if mapping.getServerMapping().getPackageName() != "">
package ${mapping.getServerMapping().getPackageName()};
</#if>

import java.io.*;
import java.lang.reflect.*;
import java.util.*;

/**
 *  This class is used as an external protocol utility. It is so we don't
 *  generate as much code.
 */

public class Utility {

    /** Marker for null. Null is a type and a value together. */
    private final static short NULL_TYPE = -1;
    
    /** Marker for void return types. */
    public final static Object VOID_VALUE = new Object();
    
    /**
     * Sends return values to the client output stream.
     *
     * @param output The output stream into which all the data should be written
     * @param  returnValue The value which we should write into the stream
     * @throws IOException If an error occured while writing the results
     */
    public static void writeResults( DataOutput output, Object returnValue, int[] paramIDs) throws IOException {
        for ( int i = 0; i < paramIDs.length; i++ ) {
            writeObject(output, returnValue, paramIDs[i]);
        }
    }
    
    /**
     * 
     * @param output 
     * @param o 
     * @throws java.io.IOException 
     */
    public static void writeObject(DataOutput output, Object o, int id) throws IOException {
        if( o == null ) {
            // write null type to the stream
            output.writeShort( NULL_TYPE );
            return;
        }
        switch( id ) {
        <#list returnTypes as type>
            case ${registry.getRegisteredTypeId( type )?c}:
                // ${type.getName()}
                <#assign serializer = mapping.getRegistry().getTypeSerializer( type )/>
                output.writeShort(${registry.getRegisteredTypeId( type )?c});                    
                <#if type.getName() != "void">
                    <#if type.isPrimitive()>
                        ${serializer.toStream( mapping, type, "output", serializer.fromObject( mapping, type, "o" ))}
                    <#else>
                        ${serializer.toStream( mapping, type, "output", "o" )}
                    </#if>
                </#if>
                break;
        </#list>
            default:
                // default if a data type is not supported
                throw new IllegalArgumentException("Unsupported parameter type: " + o.getClass());
        }
    }

    /**
     * 
     * @param in 
     * @return 
     * @throws java.io.IOException 
     */
    protected static Object readObject(DataInput in) throws IOException {
        short type = in.readShort();        
        Object result;
        switch (type) {
        <#list parameterTypes as type>
            <#assign serializer = mapping.getRegistry().getTypeSerializer( type )/>
            case ${registry.getRegisteredTypeId( type )?c}:
                // ${type.getName()}
                <#if type.isPrimitive() && !type.isArray()>
                    <#assign typeFromStream = serializer.fromStream( mapping, type, "in", null )/>
                    return ${serializer.toObject( mapping, type, typeFromStream )};
                <#else>
                    ${serializer.fromStream( mapping, type, "in", "result" )}
                    return result;
                </#if>
        </#list>
            case NULL_TYPE: /* null */
                return null;
            default:
                throw new IllegalArgumentException(
                    "Unsupported return type (" + type + ")");
        }
    }
}
//GEN-END:Client