//GEN-BEGIN:Client
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 */

/**
 * This file is generated. Please do not change
 */
<#assign packageName = mapping.getServerMapping().getPackageName()/>
<#if packageName != "">
package ${packageName};
</#if>

import java.io.*;
import javax.servlet.http.HttpSession;
import java.util.*;

/**
 * Invocation Gateways
 */
public class JavonGateways {
    <#list mapping.getServiceMappings() as service>
    <#list service.getMethods() as method>
    <#assign serviceClassName = service.getClassName()/>
    <#assign servicePackageName = service.getPackageName()/>
    <#assign serviceType = service.getType()/>
    <#if mapping.getProperty( "serviceType" ) == "WSDL">
        <#assign instanceTypeName = mapping.getProperty( "instance" )/>
    <#else>
        <#if servicePackageName == "">
            <#assign instanceTypeName = serviceClassName/>
        <#else>
            <#assign instanceTypeName = servicePackageName + "." + serviceClassName/>
        </#if>
    </#if>
    /**
     *  This class implements the application server connectivity specific to the needs.
     *  ${instanceTypeName}
     */
    public static class ${packageName?replace( ".", "_" )}_${serviceClassName}${method.getName()}${method.getRequestID()}Gateway implements InvocationAbstraction {

        /**
         *  This method performs the actual invocation of server functionality. It is
         *  used by the servlet to delegate functionality to external classes.
         *
         * @param input The stream from which we should read the parameters for the methods
         * @return The return value for the method NULL IS NOT SUPPORTED!!!!
         * @throws Exception  Thrown when a protocol error occurs
         */
        public Object invoke(HttpSession session, DataInput input) throws Exception {
            <#list method.getParameters() as parameter>
            <#assign paramType = parameter.getType()>
            ${paramType.getSerializer().instanceOf( mapping, paramType )} ${parameter.getName()} = ${paramType.getSerializer().fromObject( mapping, paramType, "Utility.readObject( input )" ) };
            </#list>
             
            ${instanceTypeName} instance = (${instanceTypeName})session .getAttribute("${instanceTypeName}");
            if (instance == null) {
                instance = (${instanceTypeName}) Class.forName("${instanceTypeName}").newInstance();
                session.setAttribute("${instanceTypeName}", instance);
            }
            <#if method.getReturnType().getName() == "void">
            instance.${method.getName()}(<@paramList method/>);
            return Utility.VOID_VALUE;
            <#else>
                <#if method.getReturnType().isPrimitive()>
                    <#assign returnType = method.getReturnType()/>
                    <#assign param = "instance." + method.getName() + "("/>
                    <#list method.getParameters() as parameter><#assign param = param + parameter.getName()><#if parameter_has_next><#assign param = param + ", "></#if></#list><#rt>
                    <#assign param = param + ")"/>
                    return ${returnType.getSerializer().toObject( mapping, returnType, param )};
                <#else>
                    return instance.${method.getName()}(<@paramList method/>);
                </#if>
            </#if>
        }

        public int[] getIds() {
            return new int[] {
                <#list method.getParameters() as parameter>
                    ${registry.getRegisteredTypeId( parameter.getType())?c}<#if parameter_has_next>,</#if>
                </#list>
                };
        };

        public int[] getReturnIds() {
            return new int[] {
                ${registry.getRegisteredTypeId( method.getReturnType())?c}
                };
        };
    }
    </#list>
    </#list>

    private static Object readObject(DataInput in) throws IOException {
        return Utility.readObject(in);
    }
}
//GEN-END:Client
<#macro paramList method>
<#list method.getParameters() as parameter>${parameter.getName()}<#if parameter_has_next>, </#if></#list><#rt>
</#macro>