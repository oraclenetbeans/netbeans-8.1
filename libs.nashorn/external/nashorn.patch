diff -r 02f810c26ff9 make/build-nasgen.xml
--- a/make/build-nasgen.xml	Wed Feb 06 12:51:09 2013 -0400
+++ b/make/build-nasgen.xml	Wed Aug 21 11:27:06 2013 +0200
@@ -25,7 +25,7 @@
     <description>Builds and runs nasgen.</description>
     <import file="build.xml"/>
 
-    <target name="build-nasgen" depends="compile-asm">
+    <target name="build-nasgen" depends="get-asm">
         <ant inheritAll="false" dir="${basedir}/buildtools/nasgen"
             antfile="build.xml" target="jar"/>
     </target>
diff -r 02f810c26ff9 make/build.xml
--- a/make/build.xml	Wed Feb 06 12:51:09 2013 -0400
+++ b/make/build.xml	Wed Aug 21 11:27:06 2013 +0200
@@ -63,24 +63,16 @@
     <delete dir="${dynalink.dir}"/>
   </target>
 
-  <target name="clean-all" depends="clean-dynalink, clean">
+  <target name="clean-asm">
+    <delete dir="${asm.dir}"/>
+  </target>
+
+  <target name="clean-all" depends="clean-dynalink, clean-asm, clean">
     <delete dir="${build.dir}"/>
   </target>
 
-  <!-- do it only if ASM is not available -->
-  <target name="compile-asm" depends="prepare" unless="asm.available">
-    <javac srcdir="${jdk.asm.src.dir}"
-           destdir="${build.classes.dir}"
-           excludes="**/optimizer/* **/xml/* **/attrs/*"
-           source="${javac.source}"
-           target="${javac.target}"
-           debug="${javac.debug}"
-           encoding="${javac.encoding}"
-           includeantruntime="false"/>
-  </target>
-
   <target name="check-dynalink-uptodate" depends="init">
-    <property name="versioned.dynalink.jar" value="${dynalink.dir}/dynalink-${dynalink.jar.version}.jar"/>
+    <property name="versioned.dynalink.jar" value="${dynalink.dir}/dynalink-${dynalink.version}.jar"/>
     <condition property="dynalink.uptodate">
       <and>
         <available file="${versioned.dynalink.jar}"/>
@@ -95,13 +87,34 @@
     <delete>
       <fileset dir="${dynalink.dir}" includes="*"/>
     </delete>
-    <property name="dynalink.download.base.url" value="http://oss.sonatype.org/content/repositories/${dynalink.version.type}s/org/dynalang/dynalink/${dynalink.version}/dynalink-${dynalink.jar.version}"/>
+    <property name="dynalink.download.base.url" value="http://repo.maven.apache.org/maven2/org/dynalang/dynalink/${dynalink.version}/dynalink-${dynalink.version}"/>
     <get src="${dynalink.download.base.url}.jar" dest="${versioned.dynalink.jar}" usetimestamp="true"/>
     <get src="${dynalink.download.base.url}-sources.jar" dest="${dynalink.dir}/dynalink-sources.jar" usetimestamp="true"/>
     <copy file="${versioned.dynalink.jar}" tofile="${dynalink.jar}" overwrite="true"/>
   </target>
 
-  <target name="compile" depends="compile-asm, get-dynalink" description="Compiles nashorn">
+  <target name="check-asm-uptodate" depends="init">
+    <property name="versioned.asm.jar" value="${asm.dir}/asm-all-${asm.version}.jar"/>
+    <condition property="asm.uptodate">
+      <and>
+        <available file="${versioned.asm.jar}"/>
+        <filesmatch file1="${versioned.asm.jar}" file2="${asm.jar}"/>
+      </and>
+    </condition>
+  </target>
+
+  <target name="get-asm" depends="check-asm-uptodate" unless="asm.uptodate">
+    <mkdir dir="${asm.dir}"/>
+    <!-- Delete previous snapshots, if any -->
+    <delete>
+      <fileset dir="${asm.dir}" includes="*"/>
+    </delete>
+    <property name="asm.download.base.url" value="http://repo1.maven.org/maven2/org/ow2/asm/asm-all/${asm.version}/asm-all-${asm.version}"/>
+    <get src="${asm.download.base.url}.jar" dest="${versioned.asm.jar}" usetimestamp="true"/>
+    <copy file="${versioned.asm.jar}" tofile="${asm.jar}" overwrite="true"/>
+  </target>
+
+  <target name="compile" depends="prepare, get-dynalink, get-asm" description="Compiles nashorn">
     <javac srcdir="${src.dir}"
            destdir="${build.classes.dir}"
            classpath="${javac.classpath}"
@@ -131,10 +144,9 @@
     <echo message="release=${nashorn.version}" file="${build.classes.dir}/jdk/nashorn/internal/runtime/resources/version.properties" append="true"/>
   </target>
 
-  <target name="jar" depends="compile, run-nasgen" description="Creates nashorn.jar">
+  <target name="jar" depends="compile" description="Creates nashorn.jar">
     <jar jarfile="${dist.jar}" manifest="${meta.inf.dir}/MANIFEST.MF" index="true" filesetmanifest="merge">
-      <fileset dir="${build.classes.dir}"/>
-      <zipfileset src="${dynalink.jar}"/>
+      <fileset dir="${build.classes.dir}" excludes="java/**"/>
       <manifest>
         <attribute name="Archiver-Version" value="n/a"/>
         <attribute name="Build-Jdk" value="${java.runtime.version}"/>
@@ -148,11 +160,12 @@
     </jar>
   </target>
 
-  <target name="javadoc" depends="prepare">
+  <target name="javadoc" depends="prepare, get-asm">
     <javadoc destdir="${dist.javadoc.dir}" use="yes" overview="src/overview.html" windowtitle="${nashorn.product.name} ${nashorn.version}" additionalparam="-quiet" failonerror="true">
       <classpath>
         <pathelement location="${build.classes.dir}"/>
         <pathelement location="${dynalink.jar}"/>
+        <pathelement location="${asm.jar}"/>
       </classpath>
       <fileset dir="${src.dir}" includes="**/*.java"/>
       <fileset dir="${jdk.asm.src.dir}" includes="**/*.java"/>
diff -r 02f810c26ff9 make/nbproject/nbjdk.properties
--- a/make/nbproject/nbjdk.properties	Wed Feb 06 12:51:09 2013 -0400
+++ b/make/nbproject/nbjdk.properties	Wed Aug 21 11:27:06 2013 +0200
@@ -20,5 +20,5 @@
 # or visit www.oracle.com if you need additional information or have any
 # questions.
 #
-nbjdk.active=JDK_1.8
+nbjdk.active=JDK_1.7
 
diff -r 02f810c26ff9 make/project.properties
--- a/make/project.properties	Wed Feb 06 12:51:09 2013 -0400
+++ b/make/project.properties	Wed Aug 21 11:27:06 2013 +0200
@@ -88,18 +88,22 @@
 # "-SNAPSHOT" suffix and the jar version will have a timestamp in it. When
 # it's 'release', the version has no suffix, and the jar version is 
 # identical to version - fun with Maven central.
-dynalink.version=0.5-SNAPSHOT
-dynalink.version.type=snapshot
-dynalink.jar.version=0.5-20130109.113843-12
+dynalink.version=0.5
 dynalink.dir.name=dynalink
 dynalink.dir=build/${dynalink.dir.name}
 dynalink.jar=${dynalink.dir}/dynalink.jar
 
+asm.version=4.0
+asm.dir.name=asm
+asm.dir=build/${asm.dir.name}
+asm.jar=${asm.dir}/asm-all.jar
+
 javac.debug=true
 javac.encoding=ascii
 javac.classpath=\
     ${build.classes.dir}:\
-    ${dynalink.jar}
+    ${dynalink.jar}:\
+    ${asm.jar}
 javac.test.classpath=\
     ${build.classes.dir}:\
     ${build.test.classes.dir}:\
diff -r 02f810c26ff9 src/META-INF/services/javax.script.ScriptEngineFactory
--- a/src/META-INF/services/javax.script.ScriptEngineFactory	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/META-INF/services/javax.script.ScriptEngineFactory	Wed Aug 21 11:27:06 2013 +0200
@@ -22,4 +22,4 @@
 # or visit www.oracle.com if you need additional information or have any
 # questions.
 #
-jdk.nashorn.api.scripting.NashornScriptEngineFactory
+#jdk.nashorn.api.scripting.NashornScriptEngineFactory
diff -r 02f810c26ff9 src/jdk/nashorn/api/scripting/NashornScriptEngineFactory.java
--- a/src/jdk/nashorn/api/scripting/NashornScriptEngineFactory.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/api/scripting/NashornScriptEngineFactory.java	Wed Aug 21 11:27:06 2013 +0200
@@ -22,220 +22,92 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-
 package jdk.nashorn.api.scripting;
 
-import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineFactory;
-import jdk.nashorn.internal.runtime.Version;
-import sun.reflect.Reflection;
 
 /**
- * JSR-223 compliant script engine factory for Nashorn. The engine answers for:
- * <ul>
- * <li>names {@code "nashorn"}, {@code "Nashorn"}, {@code "js"}, {@code "JS"}, {@code "JavaScript"},
- * {@code "javascript"}, {@code "ECMAScript"}, and {@code "ecmascript"};</li>
- * <li>MIME types {@code "application/javascript"}, {@code "application/ecmascript"}, {@code "text/javascript"}, and
- * {@code "text/ecmascript"};</li>
- * <li>as well as for the extension {@code "js"}.</li>
- * </ul>
- * Programs executing in engines created using {@link #getScriptEngine(String[])} will have the passed arguments
- * accessible as a global variable named {@code "arguments"}.
+ * This is just proxy to delegate to system script engine factory.
+ * <p>
+ * As unfortunately NB may request the NashornScriptEngineFactory (although it
+ * is commented out in META-INF/services) we just delegate to the NashornScriptEngineFactory
+ * from system classloader where the service has been found registered.
+ *
+ * @author Petr Hejl
  */
-public final class NashornScriptEngineFactory implements ScriptEngineFactory {
+public class NashornScriptEngineFactory implements ScriptEngineFactory {
+
+    private final ScriptEngineFactory delegate;
+
+    public NashornScriptEngineFactory() {
+        try {
+            Class<?> clazz = Class.forName("jdk.nashorn.api.scripting.NashornScriptEngineFactory",
+                    true, ClassLoader.getSystemClassLoader());
+            delegate = (ScriptEngineFactory) clazz.newInstance();
+        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
+            throw new RuntimeException(ex);
+        }
+    }
+
     @Override
     public String getEngineName() {
-        return (String) getParameter(ScriptEngine.ENGINE);
+        return delegate.getEngineName();
     }
 
     @Override
     public String getEngineVersion() {
-        return (String) getParameter(ScriptEngine.ENGINE_VERSION);
+        return delegate.getEngineVersion();
     }
 
     @Override
     public List<String> getExtensions() {
-        return Collections.unmodifiableList(extensions);
+        return delegate.getExtensions();
+    }
+
+    @Override
+    public List<String> getMimeTypes() {
+        return delegate.getMimeTypes();
+    }
+
+    @Override
+    public List<String> getNames() {
+        return delegate.getNames();
     }
 
     @Override
     public String getLanguageName() {
-        return (String) getParameter(ScriptEngine.LANGUAGE);
+        return delegate.getLanguageName();
     }
 
     @Override
     public String getLanguageVersion() {
-        return (String) getParameter(ScriptEngine.LANGUAGE_VERSION);
+        return delegate.getLanguageVersion();
     }
 
     @Override
-    public String getMethodCallSyntax(final String obj, final String method, final String... args) {
-        final StringBuilder sb = new StringBuilder().append(obj).append('.').append(method).append('(');
-        final int len = args.length;
-
-        if (len > 0) {
-            sb.append(args[0]);
-        }
-        for (int i = 1; i < len; i++) {
-            sb.append(',').append(args[i]);
-        }
-        sb.append(')');
-
-        return sb.toString();
+    public Object getParameter(String key) {
+        return delegate.getParameter(key);
     }
 
     @Override
-    public List<String> getMimeTypes() {
-        return Collections.unmodifiableList(mimeTypes);
+    public String getMethodCallSyntax(String obj, String m, String... args) {
+        return delegate.getMethodCallSyntax(obj, m, args);
     }
 
     @Override
-    public List<String> getNames() {
-        return Collections.unmodifiableList(names);
+    public String getOutputStatement(String toDisplay) {
+        return delegate.getOutputStatement(toDisplay);
     }
 
     @Override
-    public String getOutputStatement(final String toDisplay) {
-        return "print(" + toDisplay + ")";
-    }
-
-    @Override
-    public Object getParameter(final String key) {
-        switch (key) {
-        case ScriptEngine.NAME:
-            return "javascript";
-        case ScriptEngine.ENGINE:
-            return "Oracle Nashorn";
-        case ScriptEngine.ENGINE_VERSION:
-            return Version.version();
-        case ScriptEngine.LANGUAGE:
-            return "ECMAScript";
-        case ScriptEngine.LANGUAGE_VERSION:
-            return "ECMA - 262 Edition 5.1";
-        case "THREADING":
-            // The engine implementation is not thread-safe. Can't be
-            // used to execute scripts concurrently on multiple threads.
-            return null;
-        default:
-            throw new IllegalArgumentException("Invalid key");
-        }
-    }
-
-    @Override
-    public String getProgram(final String... statements) {
-        final StringBuilder sb = new StringBuilder();
-
-        for (final String statement : statements) {
-            sb.append(statement).append(';');
-        }
-
-        return sb.toString();
+    public String getProgram(String... statements) {
+        return delegate.getProgram(statements);
     }
 
     @Override
     public ScriptEngine getScriptEngine() {
-        return new NashornScriptEngine(this, getAppClassLoader());
-    }
-
-    /**
-     * Create a new Script engine initialized by given class loader.
-     *
-     * @param appLoader class loader to be used as script "app" class loader.
-     * @return newly created script engine.
-     */
-    public ScriptEngine getScriptEngine(final ClassLoader appLoader) {
-        return new NashornScriptEngine(this, appLoader);
-    }
-
-    /**
-     * Create a new Script engine initialized by given arguments.
-     *
-     * @param args arguments array passed to script engine.
-     * @return newly created script engine.
-     */
-    public ScriptEngine getScriptEngine(final String[] args) {
-        return new NashornScriptEngine(this, args, getAppClassLoader());
-    }
-
-    /**
-     * Create a new Script engine initialized by given arguments.
-     *
-     * @param args arguments array passed to script engine.
-     * @param appLoader class loader to be used as script "app" class loader.
-     * @return newly created script engine.
-     */
-    public ScriptEngine getScriptEngine(final String[] args, final ClassLoader appLoader) {
-        return new NashornScriptEngine(this, args, appLoader);
-    }
-
-    // -- Internals only below this point
-
-    private static final List<String> names;
-    private static final List<String> mimeTypes;
-    private static final List<String> extensions;
-
-    static {
-        names = immutableList(
-                    "nashorn", "Nashorn",
-                    "js", "JS",
-                    "JavaScript", "javascript",
-                    "ECMAScript", "ecmascript"
-                );
-
-        mimeTypes = immutableList(
-                        "application/javascript",
-                        "application/ecmascript",
-                        "text/javascript",
-                        "text/ecmascript"
-                    );
-
-        extensions = immutableList("js");
-    }
-
-    private static List<String> immutableList(final String... elements) {
-        return Collections.unmodifiableList(Arrays.asList(elements));
-    }
-
-    private static ClassLoader getAppClassLoader() {
-        if (System.getSecurityManager() == null) {
-            return Thread.currentThread().getContextClassLoader();
-        }
-
-        // Try to determine the caller class loader. Use that if it can be
-        // found. If not, use the class loader of nashorn itself as the
-        // "application" class loader for scripts.
-
-        // User could have called ScriptEngineFactory.getScriptEngine()
-        //
-        // <caller>
-        //  <factory.getScriptEngine()>
-        //   <factory.getAppClassLoader()>
-        //    <Reflection.getCallerClass()>
-        //
-        // or used one of the getEngineByABC methods of ScriptEngineManager.
-        //
-        // <caller>
-        //  <ScriptEngineManager.getEngineByName()>
-        //   <factory.getScriptEngine()>
-        //    <factory.getAppClassLoader()>
-        //     <Reflection.getCallerClass()>
-
-        // So, stack depth is 3 or 4 (recall it is zero based). We try
-        // stack depths 3, 4 and look for non-bootstrap caller.
-        Class<?> caller = null;
-        for (int depth = 3; depth < 5; depth++) {
-            caller = Reflection.getCallerClass(depth);
-            if (caller != null && caller.getClassLoader() != null) {
-                // found a non-bootstrap caller
-                break;
-            }
-        }
-
-        final ClassLoader ccl = (caller == null)? null : caller.getClassLoader();
-        // if caller loader is null, then use nashorn's own loader
-        return (ccl == null)? NashornScriptEngineFactory.class.getClassLoader() : ccl;
+        return delegate.getScriptEngine();
     }
 }
diff -r 02f810c26ff9 src/jdk/nashorn/internal/codegen/ClassEmitter.java
--- a/src/jdk/nashorn/internal/codegen/ClassEmitter.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/codegen/ClassEmitter.java	Wed Aug 21 11:27:06 2013 +0200
@@ -25,18 +25,18 @@
 
 package jdk.nashorn.internal.codegen;
 
-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_FINAL;
-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PRIVATE;
-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;
-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STATIC;
-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SUPER;
-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_VARARGS;
-import static jdk.internal.org.objectweb.asm.Opcodes.H_INVOKEINTERFACE;
-import static jdk.internal.org.objectweb.asm.Opcodes.H_INVOKESPECIAL;
-import static jdk.internal.org.objectweb.asm.Opcodes.H_INVOKESTATIC;
-import static jdk.internal.org.objectweb.asm.Opcodes.H_INVOKEVIRTUAL;
-import static jdk.internal.org.objectweb.asm.Opcodes.H_NEWINVOKESPECIAL;
-import static jdk.internal.org.objectweb.asm.Opcodes.V1_7;
+import static org.objectweb.asm.Opcodes.ACC_FINAL;
+import static org.objectweb.asm.Opcodes.ACC_PRIVATE;
+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;
+import static org.objectweb.asm.Opcodes.ACC_STATIC;
+import static org.objectweb.asm.Opcodes.ACC_SUPER;
+import static org.objectweb.asm.Opcodes.ACC_VARARGS;
+import static org.objectweb.asm.Opcodes.H_INVOKEINTERFACE;
+import static org.objectweb.asm.Opcodes.H_INVOKESPECIAL;
+import static org.objectweb.asm.Opcodes.H_INVOKESTATIC;
+import static org.objectweb.asm.Opcodes.H_INVOKEVIRTUAL;
+import static org.objectweb.asm.Opcodes.H_NEWINVOKESPECIAL;
+import static org.objectweb.asm.Opcodes.V1_7;
 import static jdk.nashorn.internal.codegen.CompilerConstants.CLINIT;
 import static jdk.nashorn.internal.codegen.CompilerConstants.CONSTANTS;
 import static jdk.nashorn.internal.codegen.CompilerConstants.GET_ARRAY_PREFIX;
@@ -56,10 +56,10 @@
 import java.util.EnumSet;
 import java.util.HashSet;
 import java.util.Set;
-import jdk.internal.org.objectweb.asm.ClassReader;
-import jdk.internal.org.objectweb.asm.ClassWriter;
-import jdk.internal.org.objectweb.asm.MethodVisitor;
-import jdk.internal.org.objectweb.asm.util.TraceClassVisitor;
+import org.objectweb.asm.ClassReader;
+import org.objectweb.asm.ClassWriter;
+import org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.util.TraceClassVisitor;
 import jdk.nashorn.internal.codegen.types.Type;
 import jdk.nashorn.internal.ir.FunctionNode;
 import jdk.nashorn.internal.runtime.Context;
diff -r 02f810c26ff9 src/jdk/nashorn/internal/codegen/MethodEmitter.java
--- a/src/jdk/nashorn/internal/codegen/MethodEmitter.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/codegen/MethodEmitter.java	Wed Aug 21 11:27:06 2013 +0200
@@ -25,38 +25,38 @@
 
 package jdk.nashorn.internal.codegen;
 
-import static jdk.internal.org.objectweb.asm.Opcodes.ATHROW;
-import static jdk.internal.org.objectweb.asm.Opcodes.CHECKCAST;
-import static jdk.internal.org.objectweb.asm.Opcodes.DUP2;
-import static jdk.internal.org.objectweb.asm.Opcodes.GETFIELD;
-import static jdk.internal.org.objectweb.asm.Opcodes.GETSTATIC;
-import static jdk.internal.org.objectweb.asm.Opcodes.GOTO;
-import static jdk.internal.org.objectweb.asm.Opcodes.H_INVOKESTATIC;
-import static jdk.internal.org.objectweb.asm.Opcodes.IFEQ;
-import static jdk.internal.org.objectweb.asm.Opcodes.IFGE;
-import static jdk.internal.org.objectweb.asm.Opcodes.IFGT;
-import static jdk.internal.org.objectweb.asm.Opcodes.IFLE;
-import static jdk.internal.org.objectweb.asm.Opcodes.IFLT;
-import static jdk.internal.org.objectweb.asm.Opcodes.IFNE;
-import static jdk.internal.org.objectweb.asm.Opcodes.IFNONNULL;
-import static jdk.internal.org.objectweb.asm.Opcodes.IFNULL;
-import static jdk.internal.org.objectweb.asm.Opcodes.IF_ACMPEQ;
-import static jdk.internal.org.objectweb.asm.Opcodes.IF_ACMPNE;
-import static jdk.internal.org.objectweb.asm.Opcodes.IF_ICMPEQ;
-import static jdk.internal.org.objectweb.asm.Opcodes.IF_ICMPGE;
-import static jdk.internal.org.objectweb.asm.Opcodes.IF_ICMPGT;
-import static jdk.internal.org.objectweb.asm.Opcodes.IF_ICMPLE;
-import static jdk.internal.org.objectweb.asm.Opcodes.IF_ICMPLT;
-import static jdk.internal.org.objectweb.asm.Opcodes.IF_ICMPNE;
-import static jdk.internal.org.objectweb.asm.Opcodes.INSTANCEOF;
-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKEINTERFACE;
-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESPECIAL;
-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESTATIC;
-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKEVIRTUAL;
-import static jdk.internal.org.objectweb.asm.Opcodes.NEW;
-import static jdk.internal.org.objectweb.asm.Opcodes.PUTFIELD;
-import static jdk.internal.org.objectweb.asm.Opcodes.PUTSTATIC;
-import static jdk.internal.org.objectweb.asm.Opcodes.RETURN;
+import static org.objectweb.asm.Opcodes.ATHROW;
+import static org.objectweb.asm.Opcodes.CHECKCAST;
+import static org.objectweb.asm.Opcodes.DUP2;
+import static org.objectweb.asm.Opcodes.GETFIELD;
+import static org.objectweb.asm.Opcodes.GETSTATIC;
+import static org.objectweb.asm.Opcodes.GOTO;
+import static org.objectweb.asm.Opcodes.H_INVOKESTATIC;
+import static org.objectweb.asm.Opcodes.IFEQ;
+import static org.objectweb.asm.Opcodes.IFGE;
+import static org.objectweb.asm.Opcodes.IFGT;
+import static org.objectweb.asm.Opcodes.IFLE;
+import static org.objectweb.asm.Opcodes.IFLT;
+import static org.objectweb.asm.Opcodes.IFNE;
+import static org.objectweb.asm.Opcodes.IFNONNULL;
+import static org.objectweb.asm.Opcodes.IFNULL;
+import static org.objectweb.asm.Opcodes.IF_ACMPEQ;
+import static org.objectweb.asm.Opcodes.IF_ACMPNE;
+import static org.objectweb.asm.Opcodes.IF_ICMPEQ;
+import static org.objectweb.asm.Opcodes.IF_ICMPGE;
+import static org.objectweb.asm.Opcodes.IF_ICMPGT;
+import static org.objectweb.asm.Opcodes.IF_ICMPLE;
+import static org.objectweb.asm.Opcodes.IF_ICMPLT;
+import static org.objectweb.asm.Opcodes.IF_ICMPNE;
+import static org.objectweb.asm.Opcodes.INSTANCEOF;
+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;
+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;
+import static org.objectweb.asm.Opcodes.INVOKESTATIC;
+import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;
+import static org.objectweb.asm.Opcodes.NEW;
+import static org.objectweb.asm.Opcodes.PUTFIELD;
+import static org.objectweb.asm.Opcodes.PUTSTATIC;
+import static org.objectweb.asm.Opcodes.RETURN;
 import static jdk.nashorn.internal.codegen.CompilerConstants.CONSTANTS;
 import static jdk.nashorn.internal.codegen.CompilerConstants.THIS;
 import static jdk.nashorn.internal.codegen.CompilerConstants.THIS_DEBUGGER;
@@ -71,8 +71,8 @@
 import java.util.ArrayDeque;
 import java.util.EnumSet;
 import java.util.Iterator;
-import jdk.internal.org.objectweb.asm.Handle;
-import jdk.internal.org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.Handle;
+import org.objectweb.asm.MethodVisitor;
 import jdk.nashorn.internal.codegen.ClassEmitter.Flag;
 import jdk.nashorn.internal.codegen.CompilerConstants.Call;
 import jdk.nashorn.internal.codegen.CompilerConstants.FieldAccess;
@@ -711,7 +711,7 @@
      */
     public MethodEmitter loadType(final String className) {
         debug("load type", className);
-        method.visitLdcInsn(jdk.internal.org.objectweb.asm.Type.getObjectType(className));
+        method.visitLdcInsn(org.objectweb.asm.Type.getObjectType(className));
         pushType(Type.OBJECT);
         return this;
     }
@@ -2249,7 +2249,7 @@
      *
      * see -Dnashorn.codegen.debug, --log=codegen
      */
-    public static class Label extends jdk.internal.org.objectweb.asm.Label {
+    public static class Label extends org.objectweb.asm.Label {
         /** Name of this label */
         private final String name;
 
diff -r 02f810c26ff9 src/jdk/nashorn/internal/codegen/types/ArrayType.java
--- a/src/jdk/nashorn/internal/codegen/types/ArrayType.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/codegen/types/ArrayType.java	Wed Aug 21 11:27:06 2013 +0200
@@ -25,13 +25,13 @@
 
 package jdk.nashorn.internal.codegen.types;
 
-import static jdk.internal.org.objectweb.asm.Opcodes.AALOAD;
-import static jdk.internal.org.objectweb.asm.Opcodes.AASTORE;
-import static jdk.internal.org.objectweb.asm.Opcodes.ALOAD;
-import static jdk.internal.org.objectweb.asm.Opcodes.ANEWARRAY;
-import static jdk.internal.org.objectweb.asm.Opcodes.ARRAYLENGTH;
+import static org.objectweb.asm.Opcodes.AALOAD;
+import static org.objectweb.asm.Opcodes.AASTORE;
+import static org.objectweb.asm.Opcodes.ALOAD;
+import static org.objectweb.asm.Opcodes.ANEWARRAY;
+import static org.objectweb.asm.Opcodes.ARRAYLENGTH;
 
-import jdk.internal.org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.MethodVisitor;
 
 /**
  * This is an array type, i.e. OBJECT_ARRAY, NUMBER_ARRAY.
diff -r 02f810c26ff9 src/jdk/nashorn/internal/codegen/types/BooleanType.java
--- a/src/jdk/nashorn/internal/codegen/types/BooleanType.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/codegen/types/BooleanType.java	Wed Aug 21 11:27:06 2013 +0200
@@ -50,14 +50,14 @@
 
 package jdk.nashorn.internal.codegen.types;
 
-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_0;
-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_1;
-import static jdk.internal.org.objectweb.asm.Opcodes.ILOAD;
-import static jdk.internal.org.objectweb.asm.Opcodes.IRETURN;
-import static jdk.internal.org.objectweb.asm.Opcodes.ISTORE;
+import static org.objectweb.asm.Opcodes.ICONST_0;
+import static org.objectweb.asm.Opcodes.ICONST_1;
+import static org.objectweb.asm.Opcodes.ILOAD;
+import static org.objectweb.asm.Opcodes.IRETURN;
+import static org.objectweb.asm.Opcodes.ISTORE;
 import static jdk.nashorn.internal.codegen.CompilerConstants.staticCallNoLookup;
 
-import jdk.internal.org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.MethodVisitor;
 import jdk.nashorn.internal.codegen.CompilerConstants;
 import jdk.nashorn.internal.codegen.objects.ObjectClassGenerator;
 import jdk.nashorn.internal.runtime.JSType;
diff -r 02f810c26ff9 src/jdk/nashorn/internal/codegen/types/BytecodeArrayOps.java
--- a/src/jdk/nashorn/internal/codegen/types/BytecodeArrayOps.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/codegen/types/BytecodeArrayOps.java	Wed Aug 21 11:27:06 2013 +0200
@@ -25,7 +25,7 @@
 
 package jdk.nashorn.internal.codegen.types;
 
-import jdk.internal.org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.MethodVisitor;
 
 /**
  * Array operations, not supported by all ops
diff -r 02f810c26ff9 src/jdk/nashorn/internal/codegen/types/BytecodeBitwiseOps.java
--- a/src/jdk/nashorn/internal/codegen/types/BytecodeBitwiseOps.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/codegen/types/BytecodeBitwiseOps.java	Wed Aug 21 11:27:06 2013 +0200
@@ -25,7 +25,7 @@
 
 package jdk.nashorn.internal.codegen.types;
 
-import jdk.internal.org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.MethodVisitor;
 
 /**
  * Bitwise operations not supported by all types
diff -r 02f810c26ff9 src/jdk/nashorn/internal/codegen/types/BytecodeNumericOps.java
--- a/src/jdk/nashorn/internal/codegen/types/BytecodeNumericOps.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/codegen/types/BytecodeNumericOps.java	Wed Aug 21 11:27:06 2013 +0200
@@ -25,7 +25,7 @@
 
 package jdk.nashorn.internal.codegen.types;
 
-import jdk.internal.org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.MethodVisitor;
 
 /**
  * Numeric operations, not supported by all types
diff -r 02f810c26ff9 src/jdk/nashorn/internal/codegen/types/BytecodeOps.java
--- a/src/jdk/nashorn/internal/codegen/types/BytecodeOps.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/codegen/types/BytecodeOps.java	Wed Aug 21 11:27:06 2013 +0200
@@ -25,7 +25,7 @@
 
 package jdk.nashorn.internal.codegen.types;
 
-import jdk.internal.org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.MethodVisitor;
 
 
 /**
diff -r 02f810c26ff9 src/jdk/nashorn/internal/codegen/types/IntType.java
--- a/src/jdk/nashorn/internal/codegen/types/IntType.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/codegen/types/IntType.java	Wed Aug 21 11:27:06 2013 +0200
@@ -25,35 +25,35 @@
 
 package jdk.nashorn.internal.codegen.types;
 
-import static jdk.internal.org.objectweb.asm.Opcodes.BIPUSH;
-import static jdk.internal.org.objectweb.asm.Opcodes.I2D;
-import static jdk.internal.org.objectweb.asm.Opcodes.I2L;
-import static jdk.internal.org.objectweb.asm.Opcodes.IADD;
-import static jdk.internal.org.objectweb.asm.Opcodes.IAND;
-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_0;
-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_1;
-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_2;
-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_3;
-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_4;
-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_5;
-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_M1;
-import static jdk.internal.org.objectweb.asm.Opcodes.IDIV;
-import static jdk.internal.org.objectweb.asm.Opcodes.ILOAD;
-import static jdk.internal.org.objectweb.asm.Opcodes.IMUL;
-import static jdk.internal.org.objectweb.asm.Opcodes.INEG;
-import static jdk.internal.org.objectweb.asm.Opcodes.IOR;
-import static jdk.internal.org.objectweb.asm.Opcodes.IREM;
-import static jdk.internal.org.objectweb.asm.Opcodes.IRETURN;
-import static jdk.internal.org.objectweb.asm.Opcodes.ISHL;
-import static jdk.internal.org.objectweb.asm.Opcodes.ISHR;
-import static jdk.internal.org.objectweb.asm.Opcodes.ISTORE;
-import static jdk.internal.org.objectweb.asm.Opcodes.ISUB;
-import static jdk.internal.org.objectweb.asm.Opcodes.IUSHR;
-import static jdk.internal.org.objectweb.asm.Opcodes.IXOR;
-import static jdk.internal.org.objectweb.asm.Opcodes.SIPUSH;
+import static org.objectweb.asm.Opcodes.BIPUSH;
+import static org.objectweb.asm.Opcodes.I2D;
+import static org.objectweb.asm.Opcodes.I2L;
+import static org.objectweb.asm.Opcodes.IADD;
+import static org.objectweb.asm.Opcodes.IAND;
+import static org.objectweb.asm.Opcodes.ICONST_0;
+import static org.objectweb.asm.Opcodes.ICONST_1;
+import static org.objectweb.asm.Opcodes.ICONST_2;
+import static org.objectweb.asm.Opcodes.ICONST_3;
+import static org.objectweb.asm.Opcodes.ICONST_4;
+import static org.objectweb.asm.Opcodes.ICONST_5;
+import static org.objectweb.asm.Opcodes.ICONST_M1;
+import static org.objectweb.asm.Opcodes.IDIV;
+import static org.objectweb.asm.Opcodes.ILOAD;
+import static org.objectweb.asm.Opcodes.IMUL;
+import static org.objectweb.asm.Opcodes.INEG;
+import static org.objectweb.asm.Opcodes.IOR;
+import static org.objectweb.asm.Opcodes.IREM;
+import static org.objectweb.asm.Opcodes.IRETURN;
+import static org.objectweb.asm.Opcodes.ISHL;
+import static org.objectweb.asm.Opcodes.ISHR;
+import static org.objectweb.asm.Opcodes.ISTORE;
+import static org.objectweb.asm.Opcodes.ISUB;
+import static org.objectweb.asm.Opcodes.IUSHR;
+import static org.objectweb.asm.Opcodes.IXOR;
+import static org.objectweb.asm.Opcodes.SIPUSH;
 import static jdk.nashorn.internal.codegen.CompilerConstants.staticCallNoLookup;
 
-import jdk.internal.org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.MethodVisitor;
 import jdk.nashorn.internal.codegen.CompilerConstants;
 import jdk.nashorn.internal.codegen.objects.ObjectClassGenerator;
 
diff -r 02f810c26ff9 src/jdk/nashorn/internal/codegen/types/LongType.java
--- a/src/jdk/nashorn/internal/codegen/types/LongType.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/codegen/types/LongType.java	Wed Aug 21 11:27:06 2013 +0200
@@ -25,29 +25,29 @@
 
 package jdk.nashorn.internal.codegen.types;
 
-import static jdk.internal.org.objectweb.asm.Opcodes.L2D;
-import static jdk.internal.org.objectweb.asm.Opcodes.L2I;
-import static jdk.internal.org.objectweb.asm.Opcodes.LADD;
-import static jdk.internal.org.objectweb.asm.Opcodes.LAND;
-import static jdk.internal.org.objectweb.asm.Opcodes.LCMP;
-import static jdk.internal.org.objectweb.asm.Opcodes.LCONST_0;
-import static jdk.internal.org.objectweb.asm.Opcodes.LCONST_1;
-import static jdk.internal.org.objectweb.asm.Opcodes.LDIV;
-import static jdk.internal.org.objectweb.asm.Opcodes.LLOAD;
-import static jdk.internal.org.objectweb.asm.Opcodes.LMUL;
-import static jdk.internal.org.objectweb.asm.Opcodes.LNEG;
-import static jdk.internal.org.objectweb.asm.Opcodes.LOR;
-import static jdk.internal.org.objectweb.asm.Opcodes.LREM;
-import static jdk.internal.org.objectweb.asm.Opcodes.LRETURN;
-import static jdk.internal.org.objectweb.asm.Opcodes.LSHL;
-import static jdk.internal.org.objectweb.asm.Opcodes.LSHR;
-import static jdk.internal.org.objectweb.asm.Opcodes.LSTORE;
-import static jdk.internal.org.objectweb.asm.Opcodes.LSUB;
-import static jdk.internal.org.objectweb.asm.Opcodes.LUSHR;
-import static jdk.internal.org.objectweb.asm.Opcodes.LXOR;
+import static org.objectweb.asm.Opcodes.L2D;
+import static org.objectweb.asm.Opcodes.L2I;
+import static org.objectweb.asm.Opcodes.LADD;
+import static org.objectweb.asm.Opcodes.LAND;
+import static org.objectweb.asm.Opcodes.LCMP;
+import static org.objectweb.asm.Opcodes.LCONST_0;
+import static org.objectweb.asm.Opcodes.LCONST_1;
+import static org.objectweb.asm.Opcodes.LDIV;
+import static org.objectweb.asm.Opcodes.LLOAD;
+import static org.objectweb.asm.Opcodes.LMUL;
+import static org.objectweb.asm.Opcodes.LNEG;
+import static org.objectweb.asm.Opcodes.LOR;
+import static org.objectweb.asm.Opcodes.LREM;
+import static org.objectweb.asm.Opcodes.LRETURN;
+import static org.objectweb.asm.Opcodes.LSHL;
+import static org.objectweb.asm.Opcodes.LSHR;
+import static org.objectweb.asm.Opcodes.LSTORE;
+import static org.objectweb.asm.Opcodes.LSUB;
+import static org.objectweb.asm.Opcodes.LUSHR;
+import static org.objectweb.asm.Opcodes.LXOR;
 import static jdk.nashorn.internal.codegen.CompilerConstants.staticCallNoLookup;
 
-import jdk.internal.org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.MethodVisitor;
 import jdk.nashorn.internal.codegen.CompilerConstants;
 import jdk.nashorn.internal.codegen.objects.ObjectClassGenerator;
 
diff -r 02f810c26ff9 src/jdk/nashorn/internal/codegen/types/NumberType.java
--- a/src/jdk/nashorn/internal/codegen/types/NumberType.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/codegen/types/NumberType.java	Wed Aug 21 11:27:06 2013 +0200
@@ -25,22 +25,22 @@
 
 package jdk.nashorn.internal.codegen.types;
 
-import static jdk.internal.org.objectweb.asm.Opcodes.DADD;
-import static jdk.internal.org.objectweb.asm.Opcodes.DCMPG;
-import static jdk.internal.org.objectweb.asm.Opcodes.DCMPL;
-import static jdk.internal.org.objectweb.asm.Opcodes.DCONST_0;
-import static jdk.internal.org.objectweb.asm.Opcodes.DCONST_1;
-import static jdk.internal.org.objectweb.asm.Opcodes.DDIV;
-import static jdk.internal.org.objectweb.asm.Opcodes.DLOAD;
-import static jdk.internal.org.objectweb.asm.Opcodes.DMUL;
-import static jdk.internal.org.objectweb.asm.Opcodes.DNEG;
-import static jdk.internal.org.objectweb.asm.Opcodes.DREM;
-import static jdk.internal.org.objectweb.asm.Opcodes.DRETURN;
-import static jdk.internal.org.objectweb.asm.Opcodes.DSTORE;
-import static jdk.internal.org.objectweb.asm.Opcodes.DSUB;
+import static org.objectweb.asm.Opcodes.DADD;
+import static org.objectweb.asm.Opcodes.DCMPG;
+import static org.objectweb.asm.Opcodes.DCMPL;
+import static org.objectweb.asm.Opcodes.DCONST_0;
+import static org.objectweb.asm.Opcodes.DCONST_1;
+import static org.objectweb.asm.Opcodes.DDIV;
+import static org.objectweb.asm.Opcodes.DLOAD;
+import static org.objectweb.asm.Opcodes.DMUL;
+import static org.objectweb.asm.Opcodes.DNEG;
+import static org.objectweb.asm.Opcodes.DREM;
+import static org.objectweb.asm.Opcodes.DRETURN;
+import static org.objectweb.asm.Opcodes.DSTORE;
+import static org.objectweb.asm.Opcodes.DSUB;
 import static jdk.nashorn.internal.codegen.CompilerConstants.staticCallNoLookup;
 
-import jdk.internal.org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.MethodVisitor;
 import jdk.nashorn.internal.codegen.CompilerConstants;
 import jdk.nashorn.internal.codegen.objects.ObjectClassGenerator;
 import jdk.nashorn.internal.runtime.JSType;
diff -r 02f810c26ff9 src/jdk/nashorn/internal/codegen/types/ObjectType.java
--- a/src/jdk/nashorn/internal/codegen/types/ObjectType.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/codegen/types/ObjectType.java	Wed Aug 21 11:27:06 2013 +0200
@@ -25,18 +25,18 @@
 
 package jdk.nashorn.internal.codegen.types;
 
-import static jdk.internal.org.objectweb.asm.Opcodes.ACONST_NULL;
-import static jdk.internal.org.objectweb.asm.Opcodes.ALOAD;
-import static jdk.internal.org.objectweb.asm.Opcodes.ARETURN;
-import static jdk.internal.org.objectweb.asm.Opcodes.ASTORE;
-import static jdk.internal.org.objectweb.asm.Opcodes.CHECKCAST;
-import static jdk.internal.org.objectweb.asm.Opcodes.GETSTATIC;
+import static org.objectweb.asm.Opcodes.ACONST_NULL;
+import static org.objectweb.asm.Opcodes.ALOAD;
+import static org.objectweb.asm.Opcodes.ARETURN;
+import static org.objectweb.asm.Opcodes.ASTORE;
+import static org.objectweb.asm.Opcodes.CHECKCAST;
+import static org.objectweb.asm.Opcodes.GETSTATIC;
 import static jdk.nashorn.internal.codegen.CompilerConstants.className;
 import static jdk.nashorn.internal.codegen.CompilerConstants.typeDescriptor;
 
 import java.lang.invoke.MethodHandle;
-import jdk.internal.org.objectweb.asm.Handle;
-import jdk.internal.org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.Handle;
+import org.objectweb.asm.MethodVisitor;
 import jdk.nashorn.internal.codegen.CompilerConstants;
 import jdk.nashorn.internal.runtime.JSType;
 import jdk.nashorn.internal.runtime.ScriptRuntime;
diff -r 02f810c26ff9 src/jdk/nashorn/internal/codegen/types/Type.java
--- a/src/jdk/nashorn/internal/codegen/types/Type.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/codegen/types/Type.java	Wed Aug 21 11:27:06 2013 +0200
@@ -25,30 +25,30 @@
 
 package jdk.nashorn.internal.codegen.types;
 
-import static jdk.internal.org.objectweb.asm.Opcodes.DALOAD;
-import static jdk.internal.org.objectweb.asm.Opcodes.DASTORE;
-import static jdk.internal.org.objectweb.asm.Opcodes.DUP;
-import static jdk.internal.org.objectweb.asm.Opcodes.DUP2;
-import static jdk.internal.org.objectweb.asm.Opcodes.DUP2_X1;
-import static jdk.internal.org.objectweb.asm.Opcodes.DUP2_X2;
-import static jdk.internal.org.objectweb.asm.Opcodes.DUP_X1;
-import static jdk.internal.org.objectweb.asm.Opcodes.DUP_X2;
-import static jdk.internal.org.objectweb.asm.Opcodes.IALOAD;
-import static jdk.internal.org.objectweb.asm.Opcodes.IASTORE;
-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESTATIC;
-import static jdk.internal.org.objectweb.asm.Opcodes.LASTORE;
-import static jdk.internal.org.objectweb.asm.Opcodes.NEWARRAY;
-import static jdk.internal.org.objectweb.asm.Opcodes.POP;
-import static jdk.internal.org.objectweb.asm.Opcodes.POP2;
-import static jdk.internal.org.objectweb.asm.Opcodes.SWAP;
-import static jdk.internal.org.objectweb.asm.Opcodes.T_DOUBLE;
-import static jdk.internal.org.objectweb.asm.Opcodes.T_INT;
+import static org.objectweb.asm.Opcodes.DALOAD;
+import static org.objectweb.asm.Opcodes.DASTORE;
+import static org.objectweb.asm.Opcodes.DUP;
+import static org.objectweb.asm.Opcodes.DUP2;
+import static org.objectweb.asm.Opcodes.DUP2_X1;
+import static org.objectweb.asm.Opcodes.DUP2_X2;
+import static org.objectweb.asm.Opcodes.DUP_X1;
+import static org.objectweb.asm.Opcodes.DUP_X2;
+import static org.objectweb.asm.Opcodes.IALOAD;
+import static org.objectweb.asm.Opcodes.IASTORE;
+import static org.objectweb.asm.Opcodes.INVOKESTATIC;
+import static org.objectweb.asm.Opcodes.LASTORE;
+import static org.objectweb.asm.Opcodes.NEWARRAY;
+import static org.objectweb.asm.Opcodes.POP;
+import static org.objectweb.asm.Opcodes.POP2;
+import static org.objectweb.asm.Opcodes.SWAP;
+import static org.objectweb.asm.Opcodes.T_DOUBLE;
+import static org.objectweb.asm.Opcodes.T_INT;
 
 import java.lang.invoke.MethodHandle;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
-import jdk.internal.org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.MethodVisitor;
 import jdk.nashorn.internal.codegen.CompilerConstants.Call;
 
 
@@ -119,7 +119,7 @@
      * @return descriptor string
      */
     public static String getDescriptor(final Class<?> type) {
-        return jdk.internal.org.objectweb.asm.Type.getDescriptor(type);
+        return org.objectweb.asm.Type.getDescriptor(type);
     }
 
     /**
@@ -166,11 +166,11 @@
      * @return a descriptor string
      */
     public static String getMethodDescriptor(final Type returnType, final Type... types) {
-        final jdk.internal.org.objectweb.asm.Type[] itypes = new jdk.internal.org.objectweb.asm.Type[types.length];
+        final org.objectweb.asm.Type[] itypes = new org.objectweb.asm.Type[types.length];
         for (int i = 0; i < types.length; i++) {
             itypes[i] = types[i].getInternalType();
         }
-        return jdk.internal.org.objectweb.asm.Type.getMethodDescriptor(returnType.getInternalType(), itypes);
+        return org.objectweb.asm.Type.getMethodDescriptor(returnType.getInternalType(), itypes);
     }
 
     /**
@@ -182,11 +182,11 @@
      * @return a descriptor string
      */
     public static String getMethodDescriptor(final Class<?> returnType, final Class<?>... types) {
-        final jdk.internal.org.objectweb.asm.Type[] itypes = new jdk.internal.org.objectweb.asm.Type[types.length];
+        final org.objectweb.asm.Type[] itypes = new org.objectweb.asm.Type[types.length];
         for (int i = 0; i < types.length; i++) {
             itypes[i] = getInternalType(types[i]);
         }
-        return jdk.internal.org.objectweb.asm.Type.getMethodDescriptor(getInternalType(returnType), itypes);
+        return org.objectweb.asm.Type.getMethodDescriptor(getInternalType(returnType), itypes);
     }
 
     /**
@@ -197,31 +197,31 @@
      * @return Nashorn type
      */
     @SuppressWarnings("fallthrough")
-    static Type typeFor(final jdk.internal.org.objectweb.asm.Type itype) {
+    static Type typeFor(final org.objectweb.asm.Type itype) {
         switch (itype.getSort()) {
-        case jdk.internal.org.objectweb.asm.Type.BOOLEAN:
+        case org.objectweb.asm.Type.BOOLEAN:
             return BOOLEAN;
-        case jdk.internal.org.objectweb.asm.Type.INT:
+        case org.objectweb.asm.Type.INT:
             return INT;
-        case jdk.internal.org.objectweb.asm.Type.LONG:
+        case org.objectweb.asm.Type.LONG:
             return LONG;
-        case jdk.internal.org.objectweb.asm.Type.DOUBLE:
+        case org.objectweb.asm.Type.DOUBLE:
             return NUMBER;
-        case jdk.internal.org.objectweb.asm.Type.OBJECT:
+        case org.objectweb.asm.Type.OBJECT:
             return OBJECT;
-        case jdk.internal.org.objectweb.asm.Type.VOID:
+        case org.objectweb.asm.Type.VOID:
             return null;
-        case jdk.internal.org.objectweb.asm.Type.ARRAY:
+        case org.objectweb.asm.Type.ARRAY:
             switch (itype.getElementType().getSort()) {
-            case jdk.internal.org.objectweb.asm.Type.DOUBLE:
+            case org.objectweb.asm.Type.DOUBLE:
                 return NUMBER_ARRAY;
-            case jdk.internal.org.objectweb.asm.Type.INT:
+            case org.objectweb.asm.Type.INT:
                 return INT_ARRAY;
-            case jdk.internal.org.objectweb.asm.Type.LONG:
+            case org.objectweb.asm.Type.LONG:
                 return LONG_ARRAY;
             default:
                 assert false;
-            case jdk.internal.org.objectweb.asm.Type.OBJECT:
+            case org.objectweb.asm.Type.OBJECT:
                 return OBJECT_ARRAY;
             }
 
@@ -239,7 +239,7 @@
      * @return return type
      */
     public static Type getMethodReturnType(final String methodDescriptor) {
-        return Type.typeFor(jdk.internal.org.objectweb.asm.Type.getReturnType(methodDescriptor));
+        return Type.typeFor(org.objectweb.asm.Type.getReturnType(methodDescriptor));
     }
 
     /**
@@ -249,7 +249,7 @@
      * @return parameter type array
      */
     public static Type[] getMethodArguments(final String methodDescriptor) {
-        final jdk.internal.org.objectweb.asm.Type itypes[] = jdk.internal.org.objectweb.asm.Type.getArgumentTypes(methodDescriptor);
+        final org.objectweb.asm.Type itypes[] = org.objectweb.asm.Type.getArgumentTypes(methodDescriptor);
         final Type types[] = new Type[itypes.length];
         for (int i = 0; i < itypes.length; i++) {
             types[i] = Type.typeFor(itypes[i]);
@@ -257,16 +257,16 @@
         return types;
     }
 
-    static jdk.internal.org.objectweb.asm.Type getInternalType(final String className) {
-        return jdk.internal.org.objectweb.asm.Type.getType(className);
+    static org.objectweb.asm.Type getInternalType(final String className) {
+        return org.objectweb.asm.Type.getType(className);
     }
 
-    private jdk.internal.org.objectweb.asm.Type getInternalType() {
-        return jdk.internal.org.objectweb.asm.Type.getType(getTypeClass());
+    private org.objectweb.asm.Type getInternalType() {
+        return org.objectweb.asm.Type.getType(getTypeClass());
     }
 
-    private static jdk.internal.org.objectweb.asm.Type getInternalType(final Class<?> type) {
-        return jdk.internal.org.objectweb.asm.Type.getType(type);
+    private static org.objectweb.asm.Type getInternalType(final Class<?> type) {
+        return org.objectweb.asm.Type.getType(type);
     }
 
     static void invokeStatic(final MethodVisitor method, final Call call) {
@@ -278,7 +278,7 @@
      * @return the internal name
      */
     public String getInternalName() {
-        return jdk.internal.org.objectweb.asm.Type.getInternalName(getTypeClass());
+        return org.objectweb.asm.Type.getInternalName(getTypeClass());
     }
 
     /**
@@ -287,7 +287,7 @@
      * @return the internal name
      */
     public static String getInternalName(final Class<?> clazz) {
-        return jdk.internal.org.objectweb.asm.Type.getInternalName(clazz);
+        return org.objectweb.asm.Type.getInternalName(clazz);
     }
 
     /**
diff -r 02f810c26ff9 src/jdk/nashorn/internal/parser/AbstractParser.java
--- a/src/jdk/nashorn/internal/parser/AbstractParser.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/parser/AbstractParser.java	Wed Aug 21 11:27:06 2013 +0200
@@ -167,6 +167,10 @@
 
             // Set up next token.
             k++;
+            if (k > source.getLength()) {
+                type  = EOF;
+                return type;
+            }
             final long lastToken = token;
             token = getToken(k);
             type = Token.descType(token);
diff -r 02f810c26ff9 src/jdk/nashorn/internal/parser/JSONParser.java
--- a/src/jdk/nashorn/internal/parser/JSONParser.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/parser/JSONParser.java	Wed Aug 21 11:27:06 2013 +0200
@@ -158,24 +158,52 @@
 
     @SuppressWarnings("fallthrough")
     private LiteralNode<?> getStringLiteral() {
-        final LiteralNode<?> literal = getLiteral();
-        final String         str     = (String)literal.getValue();
+        final String str = source.getString(token);
+
+        int expectedHexDigits = 0;
+        boolean expectedEscaped = false;
 
         for (int i = 0; i < str.length(); i++) {
             final char ch = str.charAt(i);
+
+            if (expectedHexDigits > 0) {
+                if ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F')) {
+                    expectedHexDigits--;
+                    continue;
+                } else {
+                    error(AbstractParser.message("unexpected.token", str));
+                }
+            }
+
+            if (expectedEscaped) {
+                if (ch == '"' || ch == '\\' || ch == '/' || ch == 'b' || ch == 'f'
+                        || ch == 'n' || ch == 'r' || ch == 't') {
+                    expectedEscaped = false;
+                    continue;
+                } else if (ch == 'u') {
+                    expectedEscaped = false;
+                    expectedHexDigits = 4;
+                    continue;
+                } else {
+                    error(AbstractParser.message("unexpected.token", str));
+                }
+            }
+
             switch (ch) {
             default:
                 if (ch > 0x001f) {
                     break;
                 }
             case '"':
+                error(AbstractParser.message("unexpected.token", str));
+                break;
             case '\\':
-                error(AbstractParser.message("unexpected.token", str));
+                expectedEscaped = true;
                 break;
             }
         }
 
-        return literal;
+        return getLiteral();
     }
 
     /**
@@ -187,8 +215,8 @@
 
         switch (type) {
         case STRING:
+        case ESCSTRING:
             return getStringLiteral();
-        case ESCSTRING:
         case DECIMAL:
         case FLOATING:
             return getLiteral();
@@ -258,6 +286,9 @@
 
             case COMMARIGHT:
                 next();
+                if (type == RBRACKET) {
+                    error(AbstractParser.message("expected", "array element", type.getNameOrType()));
+                }
                 break;
 
             default:
@@ -297,6 +328,9 @@
 
             case COMMARIGHT:
                 next();
+                if (type == RBRACE) {
+                    error(AbstractParser.message("expected", "object member", type.getNameOrType()));
+                }
                 break;
 
             default:
@@ -325,10 +359,8 @@
         final long propertyToken = token;
         LiteralNode<?> name = null;
 
-        if (type == STRING) {
+        if (type == STRING || type == ESCSTRING) {
             name = getStringLiteral();
-        } else if (type == ESCSTRING) {
-            name = getLiteral();
         }
 
         if (name != null) {
diff -r 02f810c26ff9 src/jdk/nashorn/internal/runtime/Context.java
--- a/src/jdk/nashorn/internal/runtime/Context.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/runtime/Context.java	Wed Aug 21 11:27:06 2013 +0200
@@ -44,8 +44,8 @@
 import java.security.PrivilegedAction;
 import java.util.Locale;
 import java.util.TimeZone;
-import jdk.internal.org.objectweb.asm.ClassReader;
-import jdk.internal.org.objectweb.asm.util.CheckClassAdapter;
+import org.objectweb.asm.ClassReader;
+import org.objectweb.asm.util.CheckClassAdapter;
 import jdk.nashorn.internal.codegen.ClassEmitter;
 import jdk.nashorn.internal.codegen.Compiler;
 import jdk.nashorn.internal.codegen.Namespace;
diff -r 02f810c26ff9 src/jdk/nashorn/internal/runtime/linker/JavaAdapterFactory.java
--- a/src/jdk/nashorn/internal/runtime/linker/JavaAdapterFactory.java	Wed Feb 06 12:51:09 2013 -0400
+++ b/src/jdk/nashorn/internal/runtime/linker/JavaAdapterFactory.java	Wed Aug 21 11:27:06 2013 +0200
@@ -25,21 +25,21 @@
 
 package jdk.nashorn.internal.runtime.linker;
 
-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_FINAL;
-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PRIVATE;
-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;
-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STATIC;
-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SUPER;
-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_VARARGS;
-import static jdk.internal.org.objectweb.asm.Opcodes.ACONST_NULL;
-import static jdk.internal.org.objectweb.asm.Opcodes.ALOAD;
-import static jdk.internal.org.objectweb.asm.Opcodes.ARETURN;
-import static jdk.internal.org.objectweb.asm.Opcodes.ASTORE;
-import static jdk.internal.org.objectweb.asm.Opcodes.DUP;
-import static jdk.internal.org.objectweb.asm.Opcodes.IFNONNULL;
-import static jdk.internal.org.objectweb.asm.Opcodes.ILOAD;
-import static jdk.internal.org.objectweb.asm.Opcodes.ISTORE;
-import static jdk.internal.org.objectweb.asm.Opcodes.RETURN;
+import static org.objectweb.asm.Opcodes.ACC_FINAL;
+import static org.objectweb.asm.Opcodes.ACC_PRIVATE;
+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;
+import static org.objectweb.asm.Opcodes.ACC_STATIC;
+import static org.objectweb.asm.Opcodes.ACC_SUPER;
+import static org.objectweb.asm.Opcodes.ACC_VARARGS;
+import static org.objectweb.asm.Opcodes.ACONST_NULL;
+import static org.objectweb.asm.Opcodes.ALOAD;
+import static org.objectweb.asm.Opcodes.ARETURN;
+import static org.objectweb.asm.Opcodes.ASTORE;
+import static org.objectweb.asm.Opcodes.DUP;
+import static org.objectweb.asm.Opcodes.IFNONNULL;
+import static org.objectweb.asm.Opcodes.ILOAD;
+import static org.objectweb.asm.Opcodes.ISTORE;
+import static org.objectweb.asm.Opcodes.RETURN;
 import static jdk.nashorn.internal.runtime.ECMAErrors.typeError;
 import static jdk.nashorn.internal.runtime.linker.Lookup.MH;
 
@@ -70,11 +70,11 @@
 import java.util.Map;
 import java.util.Random;
 import java.util.Set;
-import jdk.internal.org.objectweb.asm.ClassWriter;
-import jdk.internal.org.objectweb.asm.Label;
-import jdk.internal.org.objectweb.asm.Opcodes;
-import jdk.internal.org.objectweb.asm.Type;
-import jdk.internal.org.objectweb.asm.commons.InstructionAdapter;
+import org.objectweb.asm.ClassWriter;
+import org.objectweb.asm.Label;
+import org.objectweb.asm.Opcodes;
+import org.objectweb.asm.Type;
+import org.objectweb.asm.commons.InstructionAdapter;
 import jdk.nashorn.internal.objects.NativeJava;
 import jdk.nashorn.internal.runtime.Context;
 import jdk.nashorn.internal.runtime.ECMAErrors;
