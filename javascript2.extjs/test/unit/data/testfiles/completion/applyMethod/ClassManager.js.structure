Manager:CLASS:[PRIVATE]:ESCAPED{Manager}:
  addNameAliasMappings:METHOD:[PUBLIC]:ESCAPED{addNameAliasMappings}ESCAPED{(}<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{aliases}ESCAPED{)}<font color="#999999">ESCAPED{ : }Manager</font>:
  addNameAlternateMappings:METHOD:[PUBLIC]:ESCAPED{addNameAlternateMappings}ESCAPED{(}<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{alternates}ESCAPED{)}<font color="#999999">ESCAPED{ : }Manager</font>:
  classes:CLASS:[PUBLIC]:ESCAPED{classes}:
  create:METHOD:[PUBLIC]:ESCAPED{create}ESCAPED{(}ESCAPED{className}ESCAPED{, }ESCAPED{data}ESCAPED{, }ESCAPED{createdFn}ESCAPED{)}<font color="#999999">ESCAPED{ : }Class</font>:
    data:PARAMETER:[PUBLIC]:ESCAPED{data}:
      $className:FIELD:[PUBLIC]:ESCAPED{$className}:
      createdFn:FIELD:[PUBLIC]:ESCAPED{createdFn}:
      postprocessors:FIELD:[PUBLIC]:ESCAPED{postprocessors}<font color="#999999">ESCAPED{ : }postprocessors</font>:
  createNamespaces:METHOD:[PRIVATE]:ESCAPED{createNamespaces}ESCAPED{(}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManager.createNamespaces.rootESCAPED{|}createNamespaces.root</font>:
  createOverride:METHOD:[PUBLIC]:ESCAPED{createOverride}ESCAPED{(}ESCAPED{className}ESCAPED{, }ESCAPED{data}ESCAPED{, }ESCAPED{createdFn}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManager.createOverride.meESCAPED{|}createOverride.me</font>:
    classReady:METHOD:[PRIVATE]:ESCAPED{classReady}ESCAPED{(}ESCAPED{)}<font color="#999999">ESCAPED{ : }undefined</font>:
    me:VARIABLE:[PRIVATE]:ESCAPED{me}<font color="#999999">ESCAPED{ : }Manager</font>:
    overriddenClassName:VARIABLE:[PRIVATE]:ESCAPED{overriddenClassName}:
    requires:VARIABLE:[PRIVATE]:ESCAPED{requires}:
    uses:VARIABLE:[PRIVATE]:ESCAPED{uses}:
  createdListeners:FIELD:[PUBLIC]:ESCAPED{createdListeners}<font color="#999999">ESCAPED{ : }Array</font>:
  defaultPostprocessors:FIELD:[PUBLIC]:ESCAPED{defaultPostprocessors}<font color="#999999">ESCAPED{ : }Array</font>:
  dynInstantiate:METHOD:[PRIVATE]:ESCAPED{dynInstantiate}ESCAPED{(}ESCAPED{name}ESCAPED{, }ESCAPED{args}ESCAPED{)}:
  enableNamespaceParseCache:FIELD:[PUBLIC]:ESCAPED{enableNamespaceParseCache}<font color="#999999">ESCAPED{ : }Boolean</font>:
  existCache:CLASS:[PUBLIC]:ESCAPED{existCache}:
  get:METHOD:[PUBLIC]:ESCAPED{get}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassESCAPED{|}Ext.ClassManager.get.rootESCAPED{|}Manager.classesESCAPED{|}get.root</font>:
  getAliasesByName:METHOD:[PUBLIC]:ESCAPED{getAliasesByName}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{)}<font color="#999999">ESCAPED{ : }ArrayESCAPED{|}Manager.maps.nameToAliases</font>:
  getByAlias:METHOD:[PUBLIC]:ESCAPED{getByAlias}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{alias}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassESCAPED{|}Ext.ClassManager.get.rootESCAPED{|}Manager.classesESCAPED{|}get.rootESCAPED{|}unresolved</font>:
  getClass:METHOD:[PUBLIC]:ESCAPED{getClass}ESCAPED{(}<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{object}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassESCAPED{|}Ext.ClassManager.getClass.objectESCAPED{|}Object.selfESCAPED{|}getClass.object</font>:
  getInstantiator:METHOD:[PRIVATE]:ESCAPED{getInstantiator}ESCAPED{(}ESCAPED{length}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManager.getInstantiator.instantiatorESCAPED{|}getInstantiator.instantiator</font>:
  getName:METHOD:[PUBLIC]:ESCAPED{getName}ESCAPED{(}<font color="#999999">ESCAPED{Ext.Class|Object}ESCAPED{ }</font>ESCAPED{object}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.Class.$classNameESCAPED{|}Ext.ClassManager.getName.objectESCAPED{|}Object.$classNameESCAPED{|}StringESCAPED{|}getName.object</font>:
  getNameByAlias:METHOD:[PUBLIC]:ESCAPED{getNameByAlias}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{alias}ESCAPED{)}<font color="#999999">ESCAPED{ : }Manager.maps.aliasToNameESCAPED{|}String</font>:
  getNameByAlternate:METHOD:[PUBLIC]:ESCAPED{getNameByAlternate}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{alternate}ESCAPED{)}<font color="#999999">ESCAPED{ : }Manager.maps.alternateToNameESCAPED{|}String</font>:
  getNamesByExpression:METHOD:[PUBLIC]:ESCAPED{getNamesByExpression}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{expression}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManager.getNamesByExpression.namesESCAPED{|}String[]ESCAPED{|}getNamesByExpression.names</font>:
  instantiate:METHOD:[PRIVATE]:ESCAPED{instantiate}ESCAPED{(}ESCAPED{)}<font color="#999999">ESCAPED{ : }Manager@call;@call;getInstantiator</font>:
  instantiateByAlias:METHOD:[PUBLIC]:ESCAPED{instantiateByAlias}ESCAPED{(}ESCAPED{)}<font color="#999999">ESCAPED{ : }Object</font>:
  instantiators:FIELD:[PUBLIC]:ESCAPED{instantiators}<font color="#999999">ESCAPED{ : }Array</font>:
  isCreated:METHOD:[PUBLIC]:ESCAPED{isCreated}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{className}ESCAPED{)}<font color="#999999">ESCAPED{ : }Boolean</font>:
  maps:CLASS:[PUBLIC]:ESCAPED{maps}:
    aliasToName:CLASS:[PUBLIC]:ESCAPED{aliasToName}:
    alternateToName:CLASS:[PUBLIC]:ESCAPED{alternateToName}:
    nameToAliases:CLASS:[PUBLIC]:ESCAPED{nameToAliases}:
    nameToAlternates:CLASS:[PUBLIC]:ESCAPED{nameToAlternates}:
  nameCreatedListeners:CLASS:[PUBLIC]:ESCAPED{nameCreatedListeners}:
  namespaceParseCache:CLASS:[PUBLIC]:ESCAPED{namespaceParseCache}:
  namespaceRewrites:FIELD:[PUBLIC]:ESCAPED{namespaceRewrites}<font color="#999999">ESCAPED{ : }Array</font>:
  onCreated:METHOD:[PRIVATE]:ESCAPED{onCreated}ESCAPED{(}ESCAPED{fn}ESCAPED{, }ESCAPED{scope}ESCAPED{, }ESCAPED{className}ESCAPED{)}<font color="#999999">ESCAPED{ : }undefined</font>:
    listener:CLASS:[PRIVATE]:ESCAPED{listener}:
      fn:FIELD:[PUBLIC]:ESCAPED{fn}:
      scope:FIELD:[PUBLIC]:ESCAPED{scope}:
  parseNamespace:METHOD:[PRIVATE]:ESCAPED{parseNamespace}ESCAPED{(}ESCAPED{namespace}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManager.parseNamespace.partsESCAPED{|}Manager.namespaceParseCacheESCAPED{|}parseNamespace.parts</font>:
  postprocessors:CLASS:[PUBLIC]:ESCAPED{postprocessors}:
  processCreate:METHOD:[PUBLIC]:ESCAPED{processCreate}ESCAPED{(}ESCAPED{className}ESCAPED{, }ESCAPED{cls}ESCAPED{, }ESCAPED{clsData}ESCAPED{)}<font color="#999999">ESCAPED{ : }undefined</font>:
  registerPostprocessor:METHOD:[PRIVATE]:ESCAPED{registerPostprocessor}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{, }ESCAPED{fn}ESCAPED{, }ESCAPED{properties}ESCAPED{, }ESCAPED{position}ESCAPED{, }ESCAPED{relativeTo}ESCAPED{)}<font color="#999999">ESCAPED{ : }Manager</font>:
  set:METHOD:[PUBLIC]:ESCAPED{set}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{, }<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{value}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManagerESCAPED{|}Manager</font>:
  setAlias:METHOD:[PUBLIC]:ESCAPED{setAlias}ESCAPED{(}<font color="#999999">ESCAPED{Ext.Class|String}ESCAPED{ }</font>ESCAPED{cls}ESCAPED{, }<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{alias}ESCAPED{)}<font color="#999999">ESCAPED{ : }Manager</font>:
  setDefaultPostprocessorPosition:METHOD:[PRIVATE]:ESCAPED{setDefaultPostprocessorPosition}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{, }<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{offset}ESCAPED{, }<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{relativeName}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManagerESCAPED{|}Manager</font>:
  setDefaultPostprocessors:METHOD:[PRIVATE]:ESCAPED{setDefaultPostprocessors}ESCAPED{(}<font color="#999999">ESCAPED{String|Array}ESCAPED{ }</font>ESCAPED{postprocessors}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManagerESCAPED{|}Manager</font>:
  setNamespace:METHOD:[PUBLIC]:ESCAPED{setNamespace}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{, }<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{value}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassManager.setNamespace.partESCAPED{|}setNamespace.part</font>:
  triggerCreated:METHOD:[PRIVATE]:ESCAPED{triggerCreated}ESCAPED{(}ESCAPED{className}ESCAPED{)}<font color="#999999">ESCAPED{ : }undefined</font>:
makeCtor:METHOD:[PRIVATE]:ESCAPED{makeCtor}ESCAPED{(}ESCAPED{)}<font color="#999999">ESCAPED{ : }makeCtor.constructor</font>:
  constructor:METHOD:[PRIVATE]:ESCAPED{constructor}ESCAPED{(}ESCAPED{)}:
Ext:CLASS:[PUBLIC]:ESCAPED{Ext}:
  create:FIELD:[PUBLIC]:ESCAPED{create}:
  createByAlias:FIELD:[PUBLIC]:ESCAPED{createByAlias}:
  define:METHOD:[PUBLIC]:ESCAPED{define}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{className}ESCAPED{, }<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{data}ESCAPED{, }<font color="#999999">ESCAPED{Function}ESCAPED{ }</font>ESCAPED{createdFn}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.Base</font>:
  getClass:FIELD:[PUBLIC]:ESCAPED{getClass}:
  getClassName:FIELD:[PUBLIC]:ESCAPED{getClassName}:
  getDisplayName:METHOD:[PUBLIC]:ESCAPED{getDisplayName}ESCAPED{(}<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{object}ESCAPED{)}<font color="#999999">ESCAPED{ : }Object.$classNameESCAPED{|}Object.displayNameESCAPED{|}String</font>:
  namespace:FIELD:[PUBLIC]:ESCAPED{namespace}:
  undefine:METHOD:[PRIVATE]:ESCAPED{undefine}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{className}ESCAPED{)}<font color="#999999">ESCAPED{ : }undefined</font>:
  widget:METHOD:[PUBLIC]:ESCAPED{widget}ESCAPED{(}<font color="#999999">ESCAPED{String}ESCAPED{ }</font>ESCAPED{name}ESCAPED{, }<font color="#999999">ESCAPED{Object}ESCAPED{ }</font>ESCAPED{config}ESCAPED{)}<font color="#999999">ESCAPED{ : }Ext.ClassESCAPED{|}Ext.ClassManager.get.rootESCAPED{|}Manager.classesESCAPED{|}ObjectESCAPED{|}StringESCAPED{|}get.root</font>:
UNKNOWN:CLASS:[PUBLIC]:ESCAPED{UNKNOWN}:
