# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 2012 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
#
# Contributor(s):
#
# Portions Copyrighted 2012 Sun Microsystems, Inc.

PreAuthorizeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PreAuthorize</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation lets you define an expression which is executed prior to invoking a method.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use JMS\SecurityExtraBundle\Annotation\PreAuthorize;\n\
\n\
class MyService {\n\
\    /**\n\
\     * @PreAuthorize("hasRole('A') or (hasRole('B') and hasRole('C'))")\n\
\     */\n\
\    public function secureMethod() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
SecureTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Secure</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation lets you define who is allowed to invoke a method.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use JMS\SecurityExtraBundle\Annotation\Secure;\n\
\n\
class MyService {\n\
\    /**\n\
\     * @Secure(roles="ROLE_USER, ROLE_FOO, ROLE_ADMIN")\n\
\     */\n\
\    public function secureMethod() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
SecureParamTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@SecureParam</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation lets you define restrictions for parameters which are passed to the method. This is only useful if the parameters are domain objects.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use JMS\SecurityExtraBundle\Annotation\SecureParam;\n\
\n\
class MyService {\n\
\    /**\n\
\     * @SecureParam(name="comment", permissions="EDIT, DELETE")\n\
\     * @SecureParam(name="post", permissions="OWNER")\n\
\     */\n\
\    public function secureMethod($comment, $post) {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
SecureReturnTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@SecureReturn</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation lets you define restrictions for the value which is returned by the method. This is also only useful if the returned value is a domain object.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use JMS\SecurityExtraBundle\Annotation\SecureReturn;\n\
\n\
class MyService {\n\
\    /**\n\
\     * @SecureReturn(permissions="VIEW")\n\
\     */\n\
\    public function secureMethod() {\n\
\        // ...\n\
\n\
\        return $domainObject;\n\
\    }\n\
}\n\
</code></pre>
RunAsTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@RunAs</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation lets you specify roles which are added only for the duration of the method invocation. These roles will not be taken into consideration for before, \
or after invocation access decisions.</p>\
<p>This is typically used to implement a two-tier service layer where you have public and private services, and private services are only to be invoked through a specific public service.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use JMS\SecurityExtraBundle\Annotation\Secure;\n\
use JMS\SecurityExtraBundle\Annotation\RunAs;\n\
\n\
class MyPrivateService {\n\
\    /**\n\
\     * @Secure(roles="ROLE_PRIVATE_SERVICE")\n\
\     */\n\
\    public function aMethodOnlyToBeInvokedThroughASpecificChannel() {\n\
\        // ...\n\
\    }\n\
}\n\
\n\
class MyPublicService {\n\
\    protected $myPrivateService;\n\
\n\
\    /**\n\
\     * @Secure(roles="ROLE_USER")\n\
\     * @RunAs(roles="ROLE_PRIVATE_SERVICE")\n\
\     */\n\
\    public function canBeInvokedFromOtherServices() {\n\
\        return $this->myPrivateService->aMethodOnlyToBeInvokedThroughASpecificChannel();\n\
\    }\n\
}\n\
</code></pre>
SatisfiesParentSecurityPolicyTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@SatisfiesParentSecurityPolicy</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This must be defined on a method that overrides a method which has security metadata. It is there to ensure that you are aware the security of the overridden method \
cannot be enforced anymore, and that you must copy over all annotations if you want to keep them.</p>
