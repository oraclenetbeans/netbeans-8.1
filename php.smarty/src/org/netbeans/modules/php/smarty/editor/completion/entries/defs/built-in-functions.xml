<?xml version="1.0" encoding="UTF-8"?>

<!--
    Document   : built-in-functions.xml
    Created on : May 11, 2010, 10:07 AM
    Author     : Martin Fousek
    Description:
        Purpose of the document is storage for Smarty code completion keywords - built-in functions.
-->

<entries>
    <entry name="append">
        <description>{append} is used for creating or appending template variable arrays during the execution of a template. </description>
        <attributes>
            <attribute name="var">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The name of the variable being assigned</description>
            </attribute>
            <attribute name="value">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The value being assigned</description>
            </attribute>
            <attribute name="index">
                <type>string</type>
                <required>no</required>
                <default>n/a</default>
                <description>The index for the new array element. If not specified the value is append to the end of the array.</description>
            </attribute>
            <attribute name="scope">
                <type>string</type>
                <required>no</required>
                <default>n/a</default>
                <description>The scope of the assigned variable: 'parent','root' or 'global'</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/docs/en/language.function.append.tpl</url>
    </entry>

    <entry name="block">
        <description>{block} is used to define a named area of template source for template inheritance. For details see section of Template Interitance.  &lt;p&gt;The {block} template source area of a child template will replace the correponding areas in the parent template(s). &lt;/p&gt; &lt;p&gt;Optionally {block} areas of child and parent templates can be merged into each other. You can append or prepend the parent {block} content by using the append or prepend option flag with the childs {block} definition. With the {$smarty.block.parent} the {block} content of the parent template can be inserted at any location of the child {block} content. {$smarty.block.child} inserts the {block} content of the child template at any location of the parent {block}. &lt;/p&gt; &lt;p&gt;{blocks}'s can be nested. &lt;/p&gt;</description>
        <attributes>
            <attribute name="name">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The name of the template source block</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/docs/en/language.function.block.tpl</url>
    </entry>

    <entry name="call">
        <description>{call} is used to call a template function defined by the {function} tag just like a plugin function. </description>
        <attributes>
            <attribute name="name">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The name of the template function</description>
            </attribute>
            <attribute name="assign">
                <type>string</type>
                <required>no</required>
                <default>n/a</default>
                <description>The name of the variable that the output of called template function will be assigned to</description>
            </attribute>
            <attribute name="[var ...]">
                <type>[var type]</type>
                <required>no</required>
                <default>n/a</default>
                <description>variable to pass local to template function</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/docs/en/language.function.call.tpl</url>
    </entry>

    <entry name="capture">
        <description>{capture} is used to collect the output of the template between the tags into a variable instead of displaying it. Any content between {capture name='foo'} and {/capture}  is collected into the variable specified in the name  attribute. The captured content can be used in the template from the variable $smarty.capture.foo where "foo" is the value passed in the name attribute. If you do not supply the name attribute, then "default" will be used as the name ie $smarty.capture.default. </description>
        <attributes>
            <attribute name="name">
                <type>string</type>
                <required>no</required>
                <default>default</default>
                <description>The name of the captured block</description>
            </attribute>
            <attribute name="assign">
                <type>string</type>
                <required>no</required>
                <default>n/a</default>
                <description>The variable name where to assign the captured output to</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/manual/en/language.builtin.functions.php#language.function.capture</url>
    </entry>
    
    <entry name="config_load">
        <description>{config_load} is used for loading config #variables#  from a configuration file into the template. </description>
        <attributes>
            <attribute name="file">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The name of the config file to include</description>
            </attribute>
            <attribute name="section">
                <type>string</type>
                <required>no</required>
                <default>n/a</default>
                <description>The name of the section to load</description>
            </attribute>
            <attribute name="scope">
                <type>string</type>
                <required>no</required>
                <default>local</default>
                <description>How the scope of the loaded variables are treated, which must be one of local, parent or global. local means variables are loaded into the local template context. parent means variables are loaded into both the local context and the parent template that called it. global means variables are available to all templates.</description>
            </attribute>
            <attribute name="global">
                <type>boolean</type>
                <required>yes</required>
                <default>no</default>
                <description>Whether or not variables are visible to the parent template, same as scope=parent. NOTE: This attribute is deprecated by the scope attribute, but still supported. If scope is supplied, this value is ignored. </description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/manual/en/language.function.config.load.php</url>
    </entry>

    <entry name="extends">
        <description>{extends} tags are used in child templates in template inheritance for extending parent templates. For details see section of Template Interitance. &lt;ul&gt; &lt;li&gt;The {extends} tag must be on the first line of the template. &lt;/li&gt; &lt;li&gt;If a child template extends a parent template with the {extends} tag it may contain only {block} tags. Any other template content is ignored. &lt;/li&gt; &lt;li&gt;Use the syntax for template resources to extend files outside of the $template_dir directory. &lt;/li&gt; &lt;/ul&gt;</description>
        <attributes>
            <attribute name="file">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The name of the template file which is extended</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/docs/en/language.function.extends.tpl</url>
    </entry>

    <entry name="for">
        <description>The {for}{forelse} tag is used to create simple loops. The following different formarts are supported: &lt;ul&gt; &lt;li&gt;{for $var=$start to $end} simple loop with step size of 1.&lt;/li&gt; &lt;li&gt;{for $var=$start to $end step $step} loop with individual step size. &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;{forelse} is executed when the loop is not iterated. &lt;/p&gt;</description>
        <attributes>
            <attribute name="max">
                <type>integer</type>
                <required>no</required>
                <default>n/a</default>
                <description>Limit the number of iterations</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/docs/en/language.function.for.tpl</url>
    </entry>

    <entry name="foreach">
        <description>{foreach} is used to loop over an associative array as well a numerically-indexed array, unlike {section}  which is for looping over numerically-indexed arrays only. The syntax for {foreach} is much easier than {section}, but as a tradeoff it can only be used for a single array. Every {foreach}  tag must be paired with a closing {/foreach} tag. </description>
        <attributes>
            <attribute name="from">
                <type>array</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The array you are looping through</description>
            </attribute>
            <attribute name="item">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The name of the variable that is the current element</description>
            </attribute>
            <attribute name="key">
                <type>string</type>
                <required>no</required>
                <default>n/a</default>
                <description>The name of the variable that is the current key</description>
            </attribute>
            <attribute name="name">
                <type>string</type>
                <required>no</required>
                <default>n/a</default>
                <description>The name of the foreach loop for accessing foreach properties</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/manual/en/language.function.config.load.php</url>
    </entry>

    <entry name="foreachelse">
        <description>{foreach} is used to loop over an associative array as well a numerically-indexed array, unlike {section}  which is for looping over numerically-indexed arrays only. The syntax for {foreach} is much easier than {section}, but as a tradeoff it can only be used for a single array. Every {foreach}  tag must be paired with a closing {/foreach} tag. </description>
        <attributes>
            <attribute name="from">
                <type>array</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The array you are looping through</description>
            </attribute>
            <attribute name="item">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The name of the variable that is the current element</description>
            </attribute>
            <attribute name="key">
                <type>string</type>
                <required>no</required>
                <default>n/a</default>
                <description>The name of the variable that is the current key</description>
            </attribute>
            <attribute name="name">
                <type>string</type>
                <required>no</required>
                <default>n/a</default>
                <description>The name of the foreach loop for accessing foreach properties</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/manual/en/language.function.config.load.php</url>
    </entry>

    <entry name="function">
        <description>{function} is used to create functions within a template and call them just like a plugin function. Instead of writing a plugin that generates presentational content, keeping it in the template is often a more manageable choice. It also simplifies data traversal, such as deeply nested menus. </description>
        <attributes>
            <attribute name="name">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The name of the template function</description>
            </attribute>
            <attribute name="[var ...]">
                <type>[var type]</type>
                <required>no</required>
                <default>n/a</default>
                <description>default variable value to pass local to the template function</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/docs/en/language.function.function.tpl</url>
    </entry>

    <entry name="if">
        <description>{if} statements in Smarty have much the same flexibility as PHP if statements, with a few added features for the template engine. Every {if} must be paired with a matching {/if}. {else} and {elseif} are also permitted. All PHP conditionals and functions are recognized, such as ||, or, &amp;&amp;, and, is_array(), etc. If $security is enabled, only PHP functions from the IF_FUNCS array from $security_settings are allowed.</description>
        <url>http://www.smarty.net/manual/en/language.function.if.php</url>
    </entry>

    <entry name="else">
        <description>{if} statements in Smarty have much the same flexibility as PHP if statements, with a few added features for the template engine. Every {if} must be paired with a matching {/if}. {else} and {elseif} are also permitted. All PHP conditionals and functions are recognized, such as ||, or, &amp;&amp;, and, is_array(), etc. If $security is enabled, only PHP functions from the IF_FUNCS array from $security_settings are allowed.</description>
        <url>http://www.smarty.net/manual/en/language.function.if.php</url>
    </entry>

    <entry name="elseif">
        <description>{if} statements in Smarty have much the same flexibility as PHP if statements, with a few added features for the template engine. Every {if} must be paired with a matching {/if}. {else} and {elseif} are also permitted. All PHP conditionals and functions are recognized, such as ||, or, &amp;&amp;, and, is_array(), etc. If $security is enabled, only PHP functions from the IF_FUNCS array from $security_settings are allowed.</description>
        <url>http://www.smarty.net/manual/en/language.function.if.php</url>
    </entry>

    <entry name="include">
        <description>{include} tags are used for including other templates in the current template. Any variables available in the current template are also available within the included template. </description>
        <attributes>
            <attribute name="file">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The name of the template file to include</description>
            </attribute>
            <attribute name="assign">
                <type>string</type>
                <required>no</required>
                <default>n/a</default>
                <description>The name of the variable that the output of include will be assigned to</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/manual/en/language.function.include.php</url>
    </entry>

    <entry name="include_php">
        <description> {include_php} tags are used to include a php script in your template. If $security is enabled, then the php script must be located in the $trusted_dir path. The {include_php} tag must have the attribute file, which contains the path to the included php file, either relative to $trusted_dir, or an absolute path. By default, php files are only included once even if called multiple times in the template. You can specify that it should be included every time with the once attribute. Setting once to FALSE will include the php script each time it is included in the template. You can optionally pass the assign attribute, which will specify a template variable name that the output of {include_php} will be assigned to instead of displayed. The smarty object is available as $this within the PHP script that you include. </description>
        <attributes>
            <attribute name="file">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The name of the php file to include</description>
            </attribute>
            <attribute name="once">
                <type>boolean</type>
                <required>no</required>
                <default>true</default>
                <description>whether or not to include the php file more than once if included multiple times</description>
            </attribute>
            <attribute name="assign">
                <type>string</type>
                <required>no</required>
                <default>n/a</default>
                <description>The name of the variable that the output of include_php will be assigned to</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/manual/en/language.function.include.php.php</url>
    </entry>

    <entry name="insert">
        <description>{insert} tags work much like {include} tags, except that {insert} tags are NOT cached when template caching  is enabled. They will be executed on every invocation of the template. </description>
        <attributes>
            <attribute name="name">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The name of the insert function (insert_name)</description>
            </attribute>
            <attribute name="assign">
                <type>string</type>
                <required>no</required>
                <default>n/a</default>
                <description>The name of the template variable the output will be assigned to</description>
            </attribute>
            <attribute name="script">
                <type>string</type>
                <required>no</required>
                <default>n/a</default>
                <description>The name of the php script that is included before the insert function is called</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/manual/en/language.function.insert.php</url>
    </entry>

    <entry name="ldelim">
        <description>{ldelim} and {rdelim} are used for escaping  template delimiters, by default { and }. You can also use {literal}{/literal}  to escape blocks of text eg Javascript or CSS. See also the complimentary {$smarty.ldelim}. </description>
        <url>http://www.smarty.net/manual/en/language.function.ldelim.php</url>
    </entry>

    <entry name="rdelim">
        <description>{ldelim} and {rdelim} are used for escaping  template delimiters, by default { and }. You can also use {literal}{/literal}  to escape blocks of text eg Javascript or CSS. See also the complimentary {$smarty.ldelim}. </description>
        <url>http://www.smarty.net/manual/en/language.function.ldelim.php</url>
    </entry>

    <entry name="literal">
        <description>{literal} tags allow a block of data to be taken literally. This is typically used around Javascript or stylesheet blocks where {curly braces} would interfere with the template delimiter  syntax. Anything within {literal}{/literal} tags is not interpreted, but displayed as-is. If you need template tags embedded in a {literal}  block, consider using {ldelim}{rdelim} to escape the individual delimiters instead. </description>
        <url>http://www.smarty.net/manual/en/language.function.literal.php</url>
    </entry>

    <entry name="nocache">
        <description>{nocache} is used to disable caching of a template section. Every {nocache} must be paired with a matching {/nocache}.</description>
        <url>http://www.smarty.net/docs/en/language.function.nocache.tpl</url>
    </entry>

    <entry name="php">
        <description>The {php} tags allow PHP code to be embedded directly into the template. They will not be escaped, regardless of the $php_handling setting. This is for advanced users only, not normally needed and not recommended. </description>
        <url>http://www.smarty.net/manual/en/language.function.php.php</url>
    </entry>

    <entry name="section">
        <description>A {section}  is for looping over arrays of data, unlike {foreach}  which is used to loop over a single associative array. Every {section} tag must be paired with a closing {/section} tag. </description>
        <attributes>
            <attribute name="name">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The name of the section</description>
            </attribute>
            <attribute name="loop">
                <type>mixed</type>
                <required>yes</required>
                <default>n/a</default>
                <description>Value to determine the number of loop iterations</description>
            </attribute>
            <attribute name="start">
                <type>integer</type>
                <required>no</required>
                <default>0</default>
                <description>The index position that the section will begin looping. If the value is negative, the start position is calculated from the end of the array. For example, if there are seven values in the loop array and start is -2, the start index is 5. Invalid values (values outside of the length of the loop array) are automatically truncated to the closest valid value.</description>
            </attribute>
            <attribute name="step">
                <type>integer</type>
                <required>no</required>
                <default>1</default>
                <description>The step value that will be used to traverse the loop array. For example, step=2 will loop on index 0,2,4, etc. If step is negative, it will step through the array backwards.</description>
            </attribute>
            <attribute name="max">
                <type>integer</type>
                <required>no</required>
                <default>n/a</default>
                <description>Sets the maximum number of times the section will loop.</description>
            </attribute>
            <attribute name="show">
                <type>boolean</type>
                <required>no</required>
                <default>true</default>
                <description>Determines whether or not to show this section</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/manual/en/language.function.section.php</url>
    </entry>

    <entry name="sectionelse">
        <description>A {section}  is for looping over arrays of data, unlike {foreach}  which is used to loop over a single associative array. Every {section} tag must be paired with a closing {/section} tag. </description>
        <attributes>
            <attribute name="name">
                <type>string</type>
                <required>yes</required>
                <default>n/a</default>
                <description>The name of the section</description>
            </attribute>
            <attribute name="loop">
                <type>mixed</type>
                <required>yes</required>
                <default>n/a</default>
                <description>Value to determine the number of loop iterations</description>
            </attribute>
            <attribute name="start">
                <type>integer</type>
                <required>no</required>
                <default>0</default>
                <description>The index position that the section will begin looping. If the value is negative, the start position is calculated from the end of the array. For example, if there are seven values in the loop array and start is -2, the start index is 5. Invalid values (values outside of the length of the loop array) are automatically truncated to the closest valid value.</description>
            </attribute>
            <attribute name="step">
                <type>integer</type>
                <required>no</required>
                <default>1</default>
                <description>The step value that will be used to traverse the loop array. For example, step=2 will loop on index 0,2,4, etc. If step is negative, it will step through the array backwards.</description>
            </attribute>
            <attribute name="max">
                <type>integer</type>
                <required>no</required>
                <default>n/a</default>
                <description>Sets the maximum number of times the section will loop.</description>
            </attribute>
            <attribute name="show">
                <type>boolean</type>
                <required>no</required>
                <default>true</default>
                <description>Determines whether or not to show this section</description>
            </attribute>
        </attributes>
        <url>http://www.smarty.net/manual/en/language.function.section.php</url>
    </entry>

    <entry name="setfilter">
        <description>The {setfilter}...{/setfilter} block tag allows the definition of template instance's variable filters. &lt;p&gt;SYNTAX: {setfilter filter1|filter2|filter3....}...{/setfilter}&lt;/p&gt;&lt;p&gt;The filter can be: A variable filter plugin specified by it's name, a modidier specified by it's name and optional additional parameter. &lt;/p&gt;&lt;p&gt;{setfilter}...{/setfilter} blocks can be nested. The filter definition of inner blocks does replace the definition of the outer block. &lt;/p&gt;&lt;p&gt;Template instance filters run in addition to other modifiers and filters. They run in the following order: modifier, default_modifier, $escape_html, registered variable filters, autoloaded variable filters, template instance's variable filters. Everything after default_modifier can be disabled with the nofilter flag. &lt;/p&gt;</description>
        <url>http://www.smarty.net/docs/en/language.function.setfilter.tpl</url>
    </entry>

    <entry name="strip">
        <description> Many times web designers run into the issue where white space and carriage returns affect the output of the rendered HTML (browser "features"), so you must run all your tags together in the template to get the desired results. This usually ends up in unreadable or unmanageable templates. Anything within {strip}{/strip} tags are stripped of the extra spaces or carriage returns at the beginnings and ends of the lines before they are displayed. This way you can keep your templates readable, and not worry about extra white space causing problems. Note: {strip}{/strip} does not affect the contents of template variables, see the strip modifier instead.  </description>
        <url>http://www.smarty.net/manual/en/language.function.strip.php</url>
    </entry>

    <entry name="while">
        <description>{while} loops in Smarty have much the same flexibility as PHP while statements, with a few added features for the template engine. Every {while} must be paired with a matching {/while}. All PHP conditionals and functions are recognized, such as ||, or, &amp;&amp;, and, is_array(), etc. </description>
        <url>http://www.smarty.net/docs/en/language.function.while.tpl</url>
    </entry>
</entries>
