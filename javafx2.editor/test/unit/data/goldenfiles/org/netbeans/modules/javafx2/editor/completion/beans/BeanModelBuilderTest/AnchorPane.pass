BeanInfo[
  className: javafx.scene.layout.AnchorPane; default: Property[name: children; kind: LIST; simple: false; type: javafx.scene.Node; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.Pane getChildren ()Ljavafx/collections/ObservableList; ]]; value: false
 factories: []
 properties: 
    Property[name: blendMode; kind: SETTER; simple: true; type: javafx.scene.effect.BlendMode; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setBlendMode (Ljavafx/scene/effect/BlendMode;)V ]]
    Property[name: cache; kind: SETTER; simple: true; type: boolean; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setCache (Z)V ]]
    Property[name: cacheHint; kind: SETTER; simple: true; type: javafx.scene.CacheHint; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setCacheHint (Ljavafx/scene/CacheHint;)V ]]
    Property[name: children; kind: LIST; simple: false; type: javafx.scene.Node; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.Pane getChildren ()Ljavafx/collections/ObservableList; ]]
    Property[name: childrenUnmodifiable; kind: LIST; simple: false; type: javafx.scene.Node; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Parent getChildrenUnmodifiable ()Ljavafx/collections/ObservableList; ]]
    Property[name: clip; kind: SETTER; simple: false; type: javafx.scene.Node; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setClip (Ljavafx/scene/Node;)V ]]
    Property[name: cursor; kind: SETTER; simple: false; type: javafx.scene.Cursor; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setCursor (Ljavafx/scene/Cursor;)V ]]
    Property[name: depthTest; kind: SETTER; simple: true; type: javafx.scene.DepthTest; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setDepthTest (Ljavafx/scene/DepthTest;)V ]]
    Property[name: disable; kind: SETTER; simple: true; type: boolean; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setDisable (Z)V ]]
    Property[name: effect; kind: SETTER; simple: false; type: javafx.scene.effect.Effect; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setEffect (Ljavafx/scene/effect/Effect;)V ]]
    Property[name: eventDispatcher; kind: SETTER; simple: false; type: javafx.event.EventDispatcher; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setEventDispatcher (Ljavafx/event/EventDispatcher;)V ]]
    Property[name: focusTraversable; kind: SETTER; simple: true; type: boolean; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setFocusTraversable (Z)V ]]
    Property[name: id; kind: SETTER; simple: true; type: java.lang.String; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setId (Ljava/lang/String;)V ]]
    Property[name: impl_traversalEngine; kind: SETTER; simple: false; type: com.sun.javafx.scene.traversal.TraversalEngine; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Parent setImpl_traversalEngine (Lcom/sun/javafx/scene/traversal/TraversalEngine;)V ]]
    Property[name: inputMethodRequests; kind: SETTER; simple: false; type: javafx.scene.input.InputMethodRequests; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setInputMethodRequests (Ljavafx/scene/input/InputMethodRequests;)V ]]
    Property[name: layoutX; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setLayoutX (D)V ]]
    Property[name: layoutY; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setLayoutY (D)V ]]
    Property[name: managed; kind: SETTER; simple: true; type: boolean; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setManaged (Z)V ]]
    Property[name: maxHeight; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.Region setMaxHeight (D)V ]]
    Property[name: maxWidth; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.Region setMaxWidth (D)V ]]
    Property[name: minHeight; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.Region setMinHeight (D)V ]]
    Property[name: minWidth; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.Region setMinWidth (D)V ]]
    Property[name: mouseTransparent; kind: SETTER; simple: true; type: boolean; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setMouseTransparent (Z)V ]]
    Property[name: opacity; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setOpacity (D)V ]]
    Property[name: padding; kind: SETTER; simple: false; type: javafx.geometry.Insets; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.Region setPadding (Ljavafx/geometry/Insets;)V ]]
    Property[name: pickOnBounds; kind: SETTER; simple: true; type: boolean; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setPickOnBounds (Z)V ]]
    Property[name: prefHeight; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.Region setPrefHeight (D)V ]]
    Property[name: prefWidth; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.Region setPrefWidth (D)V ]]
    Property[name: properties; kind: MAP; simple: false; type: java.lang.Object; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node getProperties ()Ljavafx/collections/ObservableMap; ]]
    Property[name: rotate; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setRotate (D)V ]]
    Property[name: rotationAxis; kind: SETTER; simple: false; type: javafx.geometry.Point3D; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setRotationAxis (Ljavafx/geometry/Point3D;)V ]]
    Property[name: scaleX; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setScaleX (D)V ]]
    Property[name: scaleY; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setScaleY (D)V ]]
    Property[name: scaleZ; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setScaleZ (D)V ]]
    Property[name: snapToPixel; kind: SETTER; simple: true; type: boolean; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.Region setSnapToPixel (Z)V ]]
    Property[name: style; kind: SETTER; simple: true; type: java.lang.String; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setStyle (Ljava/lang/String;)V ]]
    Property[name: styleClass; kind: LIST; simple: false; type: java.lang.String; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node getStyleClass ()Ljavafx/collections/ObservableList; ]]
    Property[name: stylesheets; kind: LIST; simple: false; type: java.lang.String; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Parent getStylesheets ()Ljavafx/collections/ObservableList; ]]
    Property[name: transforms; kind: LIST; simple: false; type: javafx.scene.transform.Transform; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node getTransforms ()Ljavafx/collections/ObservableList; ]]
    Property[name: translateX; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setTranslateX (D)V ]]
    Property[name: translateY; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setTranslateY (D)V ]]
    Property[name: translateZ; kind: SETTER; simple: true; type: double; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setTranslateZ (D)V ]]
    Property[name: userData; kind: SETTER; simple: false; type: java.lang.Object; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setUserData (Ljava/lang/Object;)V ]]
    Property[name: visible; kind: SETTER; simple: true; type: boolean; target: <null>; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.Node setVisible (Z)V ]]

 attached properties: 
    Property[name: bottomAnchor; kind: ATTACHED; simple: true; type: java.lang.Double; target: javafx.scene.Node; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.AnchorPane setBottomAnchor (Ljavafx/scene/Node;Ljava/lang/Double;)V ]]
    Property[name: leftAnchor; kind: ATTACHED; simple: true; type: java.lang.Double; target: javafx.scene.Node; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.AnchorPane setLeftAnchor (Ljavafx/scene/Node;Ljava/lang/Double;)V ]]
    Property[name: rightAnchor; kind: ATTACHED; simple: true; type: java.lang.Double; target: javafx.scene.Node; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.AnchorPane setRightAnchor (Ljavafx/scene/Node;Ljava/lang/Double;)V ]]
    Property[name: topAnchor; kind: ATTACHED; simple: true; type: java.lang.Double; target: javafx.scene.Node; accessor: ElementHandle[kind=METHOD; sigs=javafx.scene.layout.AnchorPane setTopAnchor (Ljavafx/scene/Node;Ljava/lang/Double;)V ]]

 events: 
    Event[name: blendModeChange; type: javafx.event.Event]
    Event[name: cacheChange; type: javafx.event.Event]
    Event[name: cacheHintChange; type: javafx.event.Event]
    Event[name: clipChange; type: javafx.event.Event]
    Event[name: contextMenuRequested; type: javafx.scene.input.ContextMenuEvent]
    Event[name: cursorChange; type: javafx.event.Event]
    Event[name: depthTestChange; type: javafx.event.Event]
    Event[name: disableChange; type: javafx.event.Event]
    Event[name: dragDetected; type: javafx.scene.input.MouseEvent]
    Event[name: dragDone; type: javafx.scene.input.DragEvent]
    Event[name: dragDropped; type: javafx.scene.input.DragEvent]
    Event[name: dragEntered; type: javafx.scene.input.DragEvent]
    Event[name: dragExited; type: javafx.scene.input.DragEvent]
    Event[name: dragOver; type: javafx.scene.input.DragEvent]
    Event[name: effectChange; type: javafx.event.Event]
    Event[name: eventDispatcherChange; type: javafx.event.Event]
    Event[name: focusTraversableChange; type: javafx.event.Event]
    Event[name: idChange; type: javafx.event.Event]
    Event[name: impl_traversalEngineChange; type: javafx.event.Event]
    Event[name: inputMethodRequestsChange; type: javafx.event.Event]
    Event[name: inputMethodTextChanged; type: javafx.scene.input.InputMethodEvent]
    Event[name: keyPressed; type: javafx.scene.input.KeyEvent]
    Event[name: keyReleased; type: javafx.scene.input.KeyEvent]
    Event[name: keyTyped; type: javafx.scene.input.KeyEvent]
    Event[name: layoutXChange; type: javafx.event.Event]
    Event[name: layoutYChange; type: javafx.event.Event]
    Event[name: managedChange; type: javafx.event.Event]
    Event[name: maxHeightChange; type: javafx.event.Event]
    Event[name: maxWidthChange; type: javafx.event.Event]
    Event[name: minHeightChange; type: javafx.event.Event]
    Event[name: minWidthChange; type: javafx.event.Event]
    Event[name: mouseClicked; type: javafx.scene.input.MouseEvent]
    Event[name: mouseDragEntered; type: javafx.scene.input.MouseDragEvent]
    Event[name: mouseDragExited; type: javafx.scene.input.MouseDragEvent]
    Event[name: mouseDragOver; type: javafx.scene.input.MouseDragEvent]
    Event[name: mouseDragReleased; type: javafx.scene.input.MouseDragEvent]
    Event[name: mouseDragged; type: javafx.scene.input.MouseEvent]
    Event[name: mouseEntered; type: javafx.scene.input.MouseEvent]
    Event[name: mouseExited; type: javafx.scene.input.MouseEvent]
    Event[name: mouseMoved; type: javafx.scene.input.MouseEvent]
    Event[name: mousePressed; type: javafx.scene.input.MouseEvent]
    Event[name: mouseReleased; type: javafx.scene.input.MouseEvent]
    Event[name: mouseTransparentChange; type: javafx.event.Event]
    Event[name: opacityChange; type: javafx.event.Event]
    Event[name: paddingChange; type: javafx.event.Event]
    Event[name: pickOnBoundsChange; type: javafx.event.Event]
    Event[name: prefHeightChange; type: javafx.event.Event]
    Event[name: prefWidthChange; type: javafx.event.Event]
    Event[name: rotate; type: javafx.scene.input.RotateEvent]
    Event[name: rotateChange; type: javafx.event.Event]
    Event[name: rotationAxisChange; type: javafx.event.Event]
    Event[name: rotationFinished; type: javafx.scene.input.RotateEvent]
    Event[name: rotationStarted; type: javafx.scene.input.RotateEvent]
    Event[name: scaleXChange; type: javafx.event.Event]
    Event[name: scaleYChange; type: javafx.event.Event]
    Event[name: scaleZChange; type: javafx.event.Event]
    Event[name: scroll; type: javafx.scene.input.ScrollEvent]
    Event[name: scrollFinished; type: javafx.scene.input.ScrollEvent]
    Event[name: scrollStarted; type: javafx.scene.input.ScrollEvent]
    Event[name: snapToPixelChange; type: javafx.event.Event]
    Event[name: styleChange; type: javafx.event.Event]
    Event[name: swipeDown; type: javafx.scene.input.SwipeEvent]
    Event[name: swipeLeft; type: javafx.scene.input.SwipeEvent]
    Event[name: swipeRight; type: javafx.scene.input.SwipeEvent]
    Event[name: swipeUp; type: javafx.scene.input.SwipeEvent]
    Event[name: touchMoved; type: javafx.scene.input.TouchEvent]
    Event[name: touchPressed; type: javafx.scene.input.TouchEvent]
    Event[name: touchReleased; type: javafx.scene.input.TouchEvent]
    Event[name: touchStationary; type: javafx.scene.input.TouchEvent]
    Event[name: translateXChange; type: javafx.event.Event]
    Event[name: translateYChange; type: javafx.event.Event]
    Event[name: translateZChange; type: javafx.event.Event]
    Event[name: visibleChange; type: javafx.event.Event]
    Event[name: zoom; type: javafx.scene.input.ZoomEvent]
    Event[name: zoomFinished; type: javafx.scene.input.ZoomEvent]
    Event[name: zoomStarted; type: javafx.scene.input.ZoomEvent]
