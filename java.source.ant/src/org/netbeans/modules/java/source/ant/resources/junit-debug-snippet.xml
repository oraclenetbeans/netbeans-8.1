<?xml version="1.0" encoding="UTF-8"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 2010-2012 Oracle and/or its affiliates. All rights reserved.

Oracle and Java are registered trademarks of Oracle and/or its affiliates.
Other names may be trademarks of their respective owners.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
particular file as subject to the "Classpath" exception as provided
by Oracle in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 2008 Sun
Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->
<project name="{0} (debug-test)" default="debug-test" basedir=".">
    <target name="-init">
        <condition property="testng.available" value="true" else="false">
            <available classname="org.testng.annotations.Test" classpath="${classpath}"/>
        </condition>
        <condition property="testng.mode" value="-mixed" else="">
            <and>
                <istrue value="${testng.available}"/>
                <available classname="org.junit.Test" classpath="${classpath}"/>
            </and>
        </condition>
    </target>
    <target name="-check-run-test-single-method-supported" if="methodname">
        <condition property="run.test.single.method.supported">
            <or>
                <available resource="org/apache/tools/ant/taskdefs/optional/junit/JUnit4TestMethodAdapter.class"/>
                <istrue value="${testng.available}"/>
            </or>
        </condition>
        <fail unless="run.test.single.method.supported">Execution of a single test method is not supported by this version of Ant.</fail>
    </target>
    <target name="-init-debug-args">
        <property name="version-output" value="java version &quot;${ant.java.version}"/>
        <condition property="have-jdk-older-than-1.4">
            <or>
                <contains string="${version-output}" substring="java version &quot;1.0"/>
                <contains string="${version-output}" substring="java version &quot;1.1"/>
                <contains string="${version-output}" substring="java version &quot;1.2"/>
                <contains string="${version-output}" substring="java version &quot;1.3"/>
            </or>
        </condition>
        <condition else="-Xdebug" property="debug-args-line" value="-Xdebug -Xnoagent -Djava.compiler=none">
            <istrue value="${have-jdk-older-than-1.4}"/>
        </condition>
        <condition property="debug-transport-by-os" value="dt_shmem" else="dt_socket">
            <os family="windows"/>
        </condition>
        <condition property="debug-transport" value="${debug.transport}" else="${debug-transport-by-os}">
            <isset property="debug.transport"/>
        </condition>
    </target>
    <target name="-prepare-junit-execution" depends="-init-debug-args">
        <property name="test.result.dir" location="${java.io.tmpdir}"/>
        <property name="test.result.file"
                  location="${test.result.dir}/TEST-${classname}.xml"/>
        <property  name="tmp.dir" value="${basedir}"/>
        <macrodef name="junit-debug-template">
            <element name="test-spec" implicit="yes"/>
            <sequential>
                <translate-classpath classpath="${classpath}" targetProperty="classpath-translated" />
                <nbjpdastart addressproperty="jpda.address" name="${classname}" stopclassname="" transport="${debug-transport}" listeningcp="${classpath}">
                    <classpath>
                        <path path="${classpath-translated}"/>
                    </classpath>
                    <bootclasspath>
                        <path path="${platform.bootcp}"/>
                    </bootclasspath>
                </nbjpdastart>
                <property name="run.jvmargs" value="" />
                <property name="work.dir" value="${basedir}"/>
                <junit showoutput="true" fork="true" dir="${work.dir}" jvm="${platform.java}" tempdir="${tmp.dir}">
                    <test-spec/>
                    <classpath path="${classpath-translated}" />
                    <jvmarg line="${debug-args-line}"/>
                    <jvmarg value="-Xrunjdwp:transport=${debug-transport},address=${jpda.address}"/>
                    <jvmarg value="-ea"/>
                    <jvmarg line="${run.jvmargs}"/>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml" />
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                </junit>
            </sequential>
        </macrodef>
        <macrodef name="testng-debug-template">
            <attribute name="test"/>
            <attribute name="method" default=""/>
            <sequential/>
        </macrodef>
        <translate-classpath classpath="${classpath}" targetProperty="classpath-translated"/>
    </target>
    <target name="-prepare-testng-execution" depends="-init-debug-args" if="${testng.available}">
        <macrodef name="junit-debug-template">
            <element name="test-spec" implicit="yes"/>
            <sequential/>
        </macrodef>
        <macrodef name="testng-debug-template">
            <attribute name="test"/>
            <attribute name="method" default=""/>
            <sequential>
                <property name="test.results.dir" location="${java.io.tmpdir}/${classname}"/>
                <property  name="tmp.dir" value="${basedir}"/>
                <translate-classpath classpath="${classpath}" targetProperty="classpath-translated" />
                <nbjpdastart addressproperty="jpda.address" name="${classname}" stopclassname="" transport="${debug-transport}" listeningcp="${classpath}">
                    <classpath>
                        <path path="${classpath-translated}"/>
                    </classpath>
                    <bootclasspath>
                        <path path="${platform.bootcp}"/>
                    </bootclasspath>
                </nbjpdastart>
                <condition else="-testclass @{test}" property="testng.cmd.args" value="-methods @{test}.@{method}">
                    <length string="@{method}" when="gt" length="0" trim="true"/>
                </condition>
                <property name="work.dir" value="${basedir}"/>
                <property name="java.failonerror" value="true"/>
                <java classname="org.testng.TestNG" dir="${work.dir}" jvm="${platform.java}" fork="true" failonerror="${java.failonerror}">
                    <jvmarg value="-Xrunjdwp:transport=${debug-transport},address=${jpda.address}"/>
                    <jvmarg line="${run.jvmargs}"/>
                    <classpath path="${classpath-translated}" />
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper from="run-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <arg line="${testng.mode}"/>
                    <arg line="-d ${test.results.dir}"/>
                    <arg line="-listener org.testng.reporters.VerboseReporter"/>
                    <arg line="${testng.cmd.args}"/>
                </java>
                <delete dir="${test.results.dir}" quiet="true"/>
            </sequential>
        </macrodef>
        <translate-classpath classpath="${classpath}" targetProperty="classpath-translated"/>
    </target>
    <target name="-prepare-execution" depends="-init-debug-args,-prepare-junit-execution,-prepare-testng-execution"/>
    <target name="-debug-test-class" depends="-prepare-execution" unless="methodname">
        <junit-debug-template>
            <test name="${classname}" todir="${test.result.dir}"/>
        </junit-debug-template>
        <testng-debug-template test="${classname}" />
    </target>
    <target name="-debug-test-method" depends="-check-run-test-single-method-supported,-prepare-execution" if="methodname">
        <junit-debug-template>
            <test name="${classname}" methods="${methodname}"
                  todir="${test.result.dir}"/>
        </junit-debug-template>
        <testng-debug-template test="${classname}" method="${methodname}" />
    </target>
    <target name="debug-test" depends="-init,-debug-test-class,-debug-test-method">
        <!-- This target is intended to be used in conjunction with the
        org.apache.tools.ant.module.spi.AntLogger. Note, the next task
        deletes just created test report. -->
        <delete file="${test.result.file}" deleteonexit="true" />
    </target>

</project>
